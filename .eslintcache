[{"D:\\dev\\webdev\\budget-planner\\webapp\\src\\index.tsx":"1","D:\\dev\\webdev\\budget-planner\\webapp\\src\\config.ts":"2","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\store.ts":"3","D:\\dev\\webdev\\budget-planner\\webapp\\src\\App.tsx":"4","D:\\dev\\webdev\\budget-planner\\webapp\\src\\constants\\routes.ts":"5","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Public\\Public.tsx":"6","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Dashboard\\Dashboard.tsx":"7","D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\PrivateRoute\\PrivateRoute.tsx":"8","D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\NoMatch\\NoMatch.tsx":"9","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Signup\\Signup.tsx":"10","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Donate\\Donate.tsx":"11","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Home\\Home.tsx":"12","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Login\\Login.tsx":"13","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Frontpage\\Frontpage.tsx":"14","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Calendar\\Calendar.tsx":"15","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\List\\List.tsx":"16","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Profile\\Profile.tsx":"17","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Loader\\Loader.tsx":"18","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\ForgotPassword\\ForgotPassword.tsx":"19","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\index.ts":"20","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\ErrorHandler.ts":"21","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\getPaymentsAndSubscriptionsData.ts":"22","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\editDataModal.ts":"23","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\PFPChanger\\PFPChanger.tsx":"24","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\productChange.ts":"25","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\pfpChanger.ts":"26","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\dataModal.ts":"27","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\CurrencyFormatter.ts":"28","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\checkNumber.ts":"29","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\EditDataModal\\EditDataModal.tsx":"30","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\DataModal\\DataModal.tsx":"31","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\OtherAuth\\OtherAuth.tsx":"32","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\NavLink\\NavLink.tsx":"33","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Footer\\Footer.tsx":"34","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Navbar\\Navbar.tsx":"35"},{"size":1115,"mtime":1613133750445,"results":"36","hashOfConfig":"37"},{"size":602,"mtime":1612507316782,"results":"38","hashOfConfig":"37"},{"size":357,"mtime":1612698706550,"results":"39","hashOfConfig":"37"},{"size":2551,"mtime":1613493525358,"results":"40","hashOfConfig":"37"},{"size":175,"mtime":1612525092483,"results":"41","hashOfConfig":"37"},{"size":661,"mtime":1613081066510,"results":"42","hashOfConfig":"37"},{"size":5855,"mtime":1613493566579,"results":"43","hashOfConfig":"37"},{"size":447,"mtime":1613080097482,"results":"44","hashOfConfig":"37"},{"size":1065,"mtime":1613493576990,"results":"45","hashOfConfig":"37"},{"size":7903,"mtime":1613549916241,"results":"46","hashOfConfig":"37"},{"size":1033,"mtime":1613125607568,"results":"47","hashOfConfig":"37"},{"size":1578,"mtime":1613493591329,"results":"48","hashOfConfig":"37"},{"size":6930,"mtime":1613549907049,"results":"49","hashOfConfig":"37"},{"size":16340,"mtime":1613597149585,"results":"50","hashOfConfig":"37"},{"size":4571,"mtime":1613303917525,"results":"51","hashOfConfig":"37"},{"size":12689,"mtime":1613305033446,"results":"52","hashOfConfig":"37"},{"size":13613,"mtime":1613597228187,"results":"53","hashOfConfig":"37"},{"size":341,"mtime":1612631481514,"results":"54","hashOfConfig":"37"},{"size":3098,"mtime":1613124394725,"results":"55","hashOfConfig":"37"},{"size":311,"mtime":1612851936543,"results":"56","hashOfConfig":"37"},{"size":179,"mtime":1612648960643,"results":"57","hashOfConfig":"37"},{"size":1129,"mtime":1613303362234,"results":"58","hashOfConfig":"37"},{"size":374,"mtime":1612853910479,"results":"59","hashOfConfig":"37"},{"size":8076,"mtime":1612772718985,"results":"60","hashOfConfig":"37"},{"size":272,"mtime":1612786292622,"results":"61","hashOfConfig":"37"},{"size":361,"mtime":1612769386147,"results":"62","hashOfConfig":"37"},{"size":374,"mtime":1612710943679,"results":"63","hashOfConfig":"37"},{"size":766,"mtime":1612613653109,"results":"64","hashOfConfig":"37"},{"size":107,"mtime":1612632001307,"results":"65","hashOfConfig":"37"},{"size":3165,"mtime":1612854072094,"results":"66","hashOfConfig":"37"},{"size":5657,"mtime":1613076792764,"results":"67","hashOfConfig":"37"},{"size":1342,"mtime":1613081105348,"results":"68","hashOfConfig":"37"},{"size":350,"mtime":1613075119746,"results":"69","hashOfConfig":"37"},{"size":915,"mtime":1613493547317,"results":"70","hashOfConfig":"37"},{"size":4596,"mtime":1613493560897,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"kba895",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"D:\\dev\\webdev\\budget-planner\\webapp\\src\\index.tsx",[],["152","153"],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\config.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\store.ts",["154","155"],"import { ThunkAction, Action, createStore } from '@reduxjs/toolkit'\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer)\r\n\r\n// export type RootState = ReturnType<typeof store.getState>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<\r\n//     ReturnType,\r\n//     RootState,\r\n//     unknown,\r\n//     Action<string>\r\n// >","D:\\dev\\webdev\\budget-planner\\webapp\\src\\App.tsx",["156","157"],"import React from 'react'\r\n\r\n// Routing\r\nimport { Redirect, Router } from \"@reach/router\"\r\nimport PrivateRoute from './hoc/PrivateRoute/PrivateRoute'\r\nimport * as ROUTES from './constants/routes';\r\n\r\n// Firebase\r\nimport 'firebase/analytics'\r\nimport 'firebase/auth'\r\nimport { useAnalytics, useAuth } from 'reactfire'\r\n\r\n// Containers\r\nimport Public from './containers/Public/Public'\r\nimport Dashboard from './containers/Dashboard/Dashboard'\r\n\r\n// Global Pages\r\nimport Login from './pages/Login/Login';\r\nimport Signup from './pages/Signup/Signup';\r\nimport NoMatch from './hoc/NoMatch/NoMatch';\r\n\r\n// Public Pages\r\nimport Home from './pages/Home/Home';\r\nimport Donate from './pages/Donate/Donate';\r\n\r\n// Dashboard Pages\r\nimport Frontpage from './pages/Dashboard/Frontpage/Frontpage';\r\nimport Calendar from './pages/Dashboard/Calendar/Calendar'\r\nimport List from './pages/Dashboard/List/List';\r\nimport Profile from './pages/Dashboard/Profile/Profile';\r\n\r\n// Components\r\nimport Loader from './components/Loader/Loader'\r\nimport ForgotPassword from './components/Public/ForgotPassword/ForgotPassword';\r\n\r\nconst App = () => {\r\n    const auth = useAuth()\r\n    const [user, setUser]: any = React.useState<any>(null)\r\n    const [readyToRender, setReadyToRender] = React.useState(false)\r\n\r\n    useAnalytics()\r\n    React.useEffect(() => {\r\n        auth.onAuthStateChanged((state) => {\r\n            if (state) setUser(state)\r\n            else setUser(null)\r\n            setReadyToRender(true)\r\n        })\r\n    }, [])\r\n\r\n    if (readyToRender) {\r\n        return (\r\n            <Router>\r\n                <NoMatch default isDashboard={false} />\r\n                <Login path={ROUTES.LOG_IN} />\r\n                <Signup path={ROUTES.SIGN_UP} />\r\n                <ForgotPassword path={ROUTES.PASSWORD_FORGET} />\r\n                <Public path={ROUTES.PUBLIC}>\r\n                    <NoMatch default isDashboard={false} />\r\n                    <Home path=\"/\" />\r\n                    <Donate path=\"/donate\" />\r\n                </Public>\r\n                <Redirect from=\"/dashboard\" to=\"/dashboard/frontpage\" noThrow />\r\n                <PrivateRoute as={Dashboard} path=\"/dashboard\">\r\n                    <NoMatch default isDashboard={true} />\r\n                    <Frontpage path=\"frontpage\" />\r\n                    <Calendar path=\"calendar\" />\r\n                    <List path=\"list\" />\r\n                    <Profile path=\"profile\" />\r\n                </PrivateRoute>\r\n            </Router>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default App","D:\\dev\\webdev\\budget-planner\\webapp\\src\\constants\\routes.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Public\\Public.tsx",["158","159","160"],"import React from 'react'\r\nimport './Public.scss'\r\n\r\n// Router\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\n// Components\r\nimport Navbar from '../../components/Public/Navbar/Navbar';\r\nimport Footer from '../../components/Public/Footer/Footer';\r\n\r\n// Pages\r\nimport Home from '../../pages/Home/Home';\r\nimport Donate from '../../pages/Donate/Donate';\r\n\r\nconst Public = (props: any) => {\r\n    return (\r\n        <div className=\"root\">\r\n            <Navbar isSmall={true} />\r\n\r\n            <div className=\"public-page wrapper\">\r\n                {props.children}\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Public","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Dashboard\\Dashboard.tsx",["161","162","163","164","165","166","167","168","169","170","171","172"],"import React from 'react'\r\nimport { useAuth, useDatabase } from 'reactfire'\r\nimport './Dashboard.scss'\r\n\r\n// Router\r\nimport { Link } from '@reach/router'\r\nimport NavLink from '../../components/NavLink/NavLink'\r\n\r\n// Components\r\nimport Loader from '../../components/Loader/Loader'\r\n\r\n// Chakra UI\r\nimport { Button, Divider, Grid, Menu, MenuButton, MenuItem, MenuList, Text, useColorMode } from '@chakra-ui/react'\r\nimport { ChevronDownIcon } from '@chakra-ui/icons'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../utils/ErrorHandler'\r\nimport * as ROUTES from '../../constants/routes'\r\nimport List from '../../pages/Dashboard/List/List'\r\nimport NoMatch from '../../hoc/NoMatch/NoMatch'\r\n\r\nconst Dashboard = (props: any) => {\r\n    const database = useDatabase()\r\n    const auth = useAuth()\r\n    const links = [\r\n        {\r\n            title: 'Frontpage',\r\n            url: '/dashboard/frontpage',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'Calendar',\r\n            url: '/dashboard/calendar',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'List',\r\n            url: '/dashboard/list',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'Calculator',\r\n            url: '/dashboard/calculator',\r\n            active: false\r\n        },\r\n        {\r\n            divider: true\r\n        },\r\n        {\r\n            title: 'Profile',\r\n            url: '/dashboard/profile',\r\n            active: false\r\n        }\r\n    ]\r\n    const [settings, setSettings] = React.useState()\r\n    const [readyToRender, setReadyToRender] = React.useState(false)\r\n    const [displayName, setDisplayName] = React.useState<string | null | undefined>('')\r\n\r\n    React.useEffect(() => {\r\n        database.ref(`${auth.currentUser?.uid}/settings`)\r\n            .once('value', (res: firebase.default.database.DataSnapshot) => {\r\n                localStorage.setItem('settings', JSON.stringify(res.val()))\r\n                setSettings(res.val())\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        fetch('https://api.exchangeratesapi.io/latest').then(res => res.json().then((data) => {\r\n            localStorage.setItem('exchangerates', JSON.stringify(data.rates))\r\n            setReadyToRender(true)\r\n        }))\r\n    }, [])\r\n\r\n    if (readyToRender) {\r\n        return (\r\n            <>\r\n                <Grid className=\"dashboard-wrapper\">\r\n                    <div className=\"sidebar\">\r\n                        <div className=\"sidebar-top\">\r\n                            {/* <Menu>\r\n                                    <MenuButton\r\n                                        as={Button}\r\n                                        fontSize=\"xl\"\r\n                                        fontWeight=\"700\"\r\n                                        display=\"flex\"\r\n                                        justifyContent=\"center\"\r\n                                        alignItems=\"center\"\r\n                                        rightIcon={<ChevronDownIcon />}\r\n                                    >\r\n                                        {auth.currentUser?.displayName}\r\n                                    </MenuButton>\r\n                                    <MenuList>\r\n                                        <MenuItem as=\"a\" href={ROUTES.PUBLIC}>Home</MenuItem>\r\n                                        <MenuItem as=\"a\" href={`${ROUTES.DASHBOARD}/profile`}>Profile</MenuItem>\r\n                                        <MenuItem as=\"button\" onClick={() => auth.signOut()}>Log out</MenuItem>\r\n                                    </MenuList>\r\n                                </Menu> */}\r\n                            <Text\r\n                                fontSize=\"24px\"\r\n                                fontWeight=\"700\"\r\n                            >\r\n                                <Link to=\"/\">\r\n                                    {auth.currentUser?.displayName}\r\n                                </Link>\r\n                            </Text>\r\n                        </div>\r\n                        <div className=\"sidebar-content\">\r\n                            {links.map((row: any, i: number) => {\r\n                                if (row.divider) {\r\n                                    return <Divider\r\n                                        my={4}\r\n                                        key={i}\r\n                                    />\r\n                                } else {\r\n                                    return (\r\n                                        <NavLink\r\n                                            to={row.url}\r\n                                            key={i}\r\n                                        >\r\n                                            {row.title}\r\n                                        </NavLink>\r\n                                    )\r\n                                }\r\n                            })}\r\n                            <Link\r\n                                to=\"/\"\r\n                                onClick={() => auth.signOut()}\r\n                            >\r\n                                Logout\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"sidebar-bottom\">\r\n                            <ThemeToggler />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dashboard\">\r\n                        {props.children}\r\n                    </div>\r\n                </Grid>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default Dashboard\r\n\r\nfunction ThemeToggler() {\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    return (\r\n        <Button size=\"sm\" onClick={toggleColorMode}>\r\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\r\n        </Button>\r\n    )\r\n}","D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\PrivateRoute\\PrivateRoute.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\NoMatch\\NoMatch.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Signup\\Signup.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Donate\\Donate.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Home\\Home.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Login\\Login.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Frontpage\\Frontpage.tsx",["173","174","175","176","177","178","179","180","181","182","183","184","185"],"import React from 'react'\r\nimport { useAuth, useDatabase } from 'reactfire'\r\n\r\n// Types\r\nimport { FinancialData } from '../../../types'\r\n\r\nimport { format } from 'date-fns'\r\n\r\n// Chakra UI\r\nimport { Box, Button, Grid, Skeleton, Stat, StatArrow, StatGroup, StatHelpText, StatLabel, StatNumber } from '@chakra-ui/react'\r\nimport { ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons'\r\n\r\n// Chart\r\nimport Chart from 'react-apexcharts'\r\nimport { ApexOptions } from 'apexcharts'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport DataModal from '../../../components/Dashboard/DataModal/DataModal'\r\nimport checkNumber from '../../../utils/checkNumber'\r\nimport Loader from '../../../components/Loader/Loader'\r\nimport store from '../../../redux/store'\r\nimport getPaymentsAndSubscriptionsData from '../../../utils/getPaymentsAndSubscriptionsData'\r\n\r\nconst Frontpage = React.memo((props: any) => {\r\n    const database = useDatabase()\r\n    const auth = useAuth()\r\n\r\n    const [readyToRender, setReadyToRender] = React.useState(false)\r\n\r\n    const [dialogs, setDialogs] = React.useState([false, false, false, false])\r\n    const [selectedYear, setSelectedYear] = React.useState<any>(new Date().getFullYear())\r\n    const [monthlyTotal, setMonthlyTotal] = React.useState(0)\r\n    const [selectedMonth, setSelectedMonth] = React.useState()\r\n    const [selectedDate, setSelectedDate] = React.useState<any>()\r\n\r\n    const [renderChart, setRenderChart] = React.useState(false)\r\n\r\n    const [salary, setSalary] = React.useState(0)\r\n    const [expences, setExpences] = React.useState(0)\r\n\r\n    const [paymentsData, setPaymentsData] = React.useState()\r\n    const [subscriptionsData, setSubscriptionsData] = React.useState()\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<ApexOptions>()\r\n    const [chartSeries, setChartSeries] = React.useState<ApexAxisChartSeries>()\r\n\r\n    React.useEffect(() => {\r\n        getData()\r\n        initChart()\r\n    }, [selectedYear, dialogs[0], dialogs[1], dialogs[2], dialogs[3]])\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setDialogs(store.getState().dataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    // Year changer\r\n    const prevYear = async () => {\r\n        let selectedYearInstance = await selectedYear\r\n        selectedYearInstance--\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const nextYear = async () => {\r\n        let selectedYearInstance = await selectedYear\r\n        selectedYearInstance++\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const resetDate = async () => {\r\n        const d = new Date()\r\n        setSelectedMonth(checkNumber(d.getMonth()))\r\n        setSelectedYear(d.getFullYear())\r\n    }\r\n\r\n    const getData = async () => {\r\n        await database.ref(`${auth.currentUser?.uid}/salary`).on('value', (snapshot: any) => {\r\n            setSalary(snapshot.val() * 12)\r\n        })\r\n    }\r\n\r\n    const handleDialogOpen = (index: any) => {\r\n        let tempArr = [false, false, false, false]\r\n        tempArr[index] = true\r\n        store.dispatch({ type: 'setOpenModal', newArr: tempArr })\r\n        setDialogs(tempArr)\r\n        setSelectedDate(format(Date.now(), 'yyyy-MM-dd'))\r\n    }\r\n\r\n    const initChart = async () => {\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((res: FinancialData[]) => {\r\n                const moneyUsageArr: any = Array.from({ length: 12 }).fill(0)\r\n                const subscriptionsData: any = Array.from({ length: 12 }).fill(0)\r\n                const paymentsData: any = Array.from({ length: 12 }).fill(0)\r\n\r\n                res.map((row: FinancialData) => {\r\n                    if (row.type === 'subscriptions') {\r\n                        if (row.year === selectedYear) {\r\n                            let subscriptions: any = Array.from({ length: 12 }).fill(0)\r\n                            if (row.recurrences)\r\n                                for (let i = 0; i < subscriptions.length; i++) {\r\n                                    if (i % (12 / row.recurrences) === 0) subscriptions[i] = Number(Math.abs(row.amount))\r\n                                }\r\n\r\n                            for (let i = 0; i < 12; i++) {\r\n                                subscriptionsData[i] += parseFloat(String(Math.abs(subscriptions[i])))\r\n                                moneyUsageArr[i] += parseFloat(String(Math.abs(row.amount)))\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        if ((row.date).split('-')[0] == selectedYear) {\r\n                            const month = parseInt(row.date.split('-')[1])\r\n                            paymentsData[month - 1] += parseFloat(String(Math.abs(row.amount)))\r\n                            moneyUsageArr[month - 1] += parseFloat(String(Math.abs(row.amount)))\r\n                        }\r\n                    }\r\n                })\r\n\r\n                calculateCurrentMonthTotal(res, subscriptionsData)\r\n                calculateExpences(paymentsData, subscriptionsData)\r\n\r\n                moneyUsageArr.map((row: number, i: number) => {\r\n                    moneyUsageArr[i] = parseFloat(row.toFixed(2))\r\n                })\r\n\r\n                let payments: any = paymentsData\r\n                let subscriptions: any = subscriptionsData\r\n                for (let i: number = 0; i < 12; i++) {\r\n                    payments[i] = parseFloat(payments[i].toFixed(2))\r\n                    subscriptions[i] = parseFloat(subscriptions[i].toFixed(2))\r\n                }\r\n\r\n                setPaymentsData(payments)\r\n                setSubscriptionsData(subscriptions)\r\n\r\n                const getMinMaxValues = (func: any, array: any[]) => func.apply(Math, array)\r\n                const minimum = getMinMaxValues(Math.min, paymentsData)\r\n                const maximum = getMinMaxValues(Math.max, moneyUsageArr)\r\n\r\n                setChartOptions({\r\n                    chart: {\r\n                        toolbar: { show: false },\r\n                        foreColor: '#808080'\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        theme: 'dark',\r\n                    },\r\n                    dataLabels: { enabled: false },\r\n                    xaxis: { categories: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"] },\r\n                    yaxis: {\r\n                        min: minimum,\r\n                        max: maximum + 10\r\n                    }\r\n                })\r\n                setChartSeries([\r\n                    {\r\n                        name: \"Payments\",\r\n                        data: paymentsData\r\n                    },\r\n                    {\r\n                        name: \"Subscriptions\",\r\n                        data: subscriptionsData\r\n                    }\r\n                ])\r\n                setRenderChart(true)\r\n                setReadyToRender(true)\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const calculateCurrentMonthTotal = (data: FinancialData[], subscriptionsData: number[]) => {\r\n        let monthlyTotal: number = 0\r\n        data.map((row: FinancialData) => {\r\n            if (row.type === 'payments') {\r\n                let date: string[] | string = row.date.split('-')\r\n                date = `${date[1]}/${date[0]}`\r\n                const checkDate: string = `${checkNumber(new Date().getMonth() + 1)}/${selectedYear}`\r\n                if (date === checkDate) monthlyTotal += row.amount\r\n            }\r\n        })\r\n        monthlyTotal += -Math.abs(subscriptionsData[new Date().getMonth()])\r\n        setMonthlyTotal(Number(monthlyTotal.toFixed(2)))\r\n    }\r\n\r\n    const calculateExpences = async (paymentsData: number[], subscriptionsData: number[]) => {\r\n        let expences: number = 0\r\n        paymentsData.map((row: number) => expences += row)\r\n        subscriptionsData.map((row: number) => expences += row)\r\n        setExpences(-Math.abs(Number(expences)))\r\n    }\r\n\r\n    if (readyToRender) {\r\n        return (\r\n            <div className=\"dashboard-frontpage\">\r\n                <Grid templateColumns=\"1fr\" p={6} gap={5}>\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box>\r\n                            <div className=\"month-changer px4 py2\">\r\n                                <ChevronLeftIcon onClick={() => prevYear()} />\r\n                                <p style={{ cursor: 'pointer' }} onClick={resetDate}>{selectedYear}</p>\r\n                                <ChevronRightIcon onClick={() => nextYear()} />\r\n                            </div>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid templateColumns=\"1fr 1fr\" p={6} gap={5} templateRows=\"200px\">\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box className=\"h-100\">\r\n                            <Grid templateColumns=\"repeat(2, 1fr)\" className=\"h-100\" style={{ alignItems: 'center' }}>\r\n                                <Button colorScheme=\"green\" className=\"m2\" onClick={() => handleDialogOpen(0)}>Add payment</Button>\r\n                                <Button colorScheme=\"green\" className=\"m2\" onClick={() => handleDialogOpen(1)}>Add subscription</Button>\r\n                                <Button colorScheme=\"blue\" className=\"m2\" onClick={() => handleDialogOpen(2)}>Add received payment</Button>\r\n                                <Button colorScheme=\"blue\" className=\"m2\" onClick={() => handleDialogOpen(3)}>Edit salary</Button>\r\n                            </Grid>\r\n                            {<DataModal open={dialogs[0]} title=\"Add payment\" type=\"payments\" negOrPos=\"negative\" index={0} />}\r\n                            {<DataModal open={dialogs[1]} title=\"Add subscription\" type=\"subscriptions\" negOrPos=\"negative\" index={1} />}\r\n                            {<DataModal open={dialogs[2]} title=\"Add received payment\" type=\"payments\" negOrPos=\"positive\" index={2} />}\r\n                            {<DataModal open={dialogs[3]} title=\"Edit salary\" type=\"salary\" negOrPos=\"positive\" index={3} />}\r\n                        </Box>\r\n                    </Box>\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box p={4} className=\"h-100\">\r\n                            <StatGroup>\r\n                                <Grid gridTemplateColumns=\"1fr 1fr\" gridTemplateRows=\"1fr 1fr\" className=\"w-100\">\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly income</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {salary !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(salary)}</StatNumber>\r\n                                                    <StatArrow type={(salary % 100) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(salary % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly expences</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {expences !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(expences)}</StatNumber>\r\n                                                    <StatArrow type={(expences % 100) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(expences % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly profit</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {(salary || expences) !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(salary + expences)}</StatNumber>\r\n                                                    <StatArrow type={(salary % expences) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(salary % expences).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Month total</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {monthlyTotal !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(monthlyTotal)}</StatNumber>\r\n                                                    <StatArrow type=\"decrease\" />\r\n                                                    {(monthlyTotal % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                </Grid>\r\n                            </StatGroup>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid templateColumns=\"1fr\" p={6} gap={5} templateRows=\"350px\">\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box p={4} className=\"h-100\">\r\n                            {renderChart ? (\r\n                                <Chart\r\n                                    height=\"100%\"\r\n                                    options={chartOptions}\r\n                                    series={chartSeries}\r\n                                    type=\"area\"\r\n                                />\r\n                            ) : (\r\n                                    <Skeleton height=\"100%\" />\r\n                                )}\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n})\r\n\r\nexport default Frontpage","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Calendar\\Calendar.tsx",["186","187","188"],"import React from 'react'\r\nimport './Calendar.scss'\r\nimport { useAuth, useFirestore } from 'reactfire'\r\n\r\n// Types\r\nimport { CalendarData, FinancialData } from '../../../types'\r\n\r\n// CSS\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\n\r\nimport format from 'date-fns/format'\r\nimport parse from 'date-fns/parse'\r\nimport startOfWeek from 'date-fns/startOfWeek'\r\nimport getDay from 'date-fns/getDay'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport checkNumber from '../../../utils/checkNumber'\r\n\r\n// Components\r\nimport Loader from '../../../components/Loader/Loader'\r\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar'\r\n\r\nconst locales = {\r\n    'en-US': require('date-fns/locale/en-US'),\r\n}\r\nconst localizer = dateFnsLocalizer({\r\n    format,\r\n    parse,\r\n    startOfWeek,\r\n    getDay,\r\n    locales,\r\n})\r\n\r\nconst CalendarPage = React.memo((props: any) => {\r\n    const [events, setEvents] = React.useState<CalendarData[]>()\r\n    const firestore = useFirestore()\r\n    const auth = useAuth()\r\n\r\n    const getPaymentsAndSubscriptionsData = async () => {\r\n        const data: FinancialData[] = []\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection('payments').get()\r\n            .then((res: firebase.default.firestore.QuerySnapshot) => {\r\n                res.forEach((doc: firebase.default.firestore.QueryDocumentSnapshot) => {\r\n                    let obj: any = doc.data()\r\n                    obj.id = doc.id\r\n                    obj.type = 'payments'\r\n                    data.push(obj)\r\n                })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection('subscriptions').get()\r\n            .then((res: firebase.default.firestore.QuerySnapshot) => {\r\n                res.forEach((doc: firebase.default.firestore.QueryDocumentSnapshot) => {\r\n                    let obj: any = doc.data()\r\n                    obj.id = doc.id\r\n                    obj.type = 'subscriptions'\r\n                    data.push(obj)\r\n                })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        return data\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((data: FinancialData[]) => {\r\n                const calendarData: CalendarData[] = []\r\n                data.map((row: any) => {\r\n                    if (row.type === 'subscriptions') {\r\n                        let subscriptions = Array.from({ length: 12 }).fill(0)\r\n                        for (let i = 0; i < subscriptions.length; i++) {\r\n                            if (i % (12 / row.recurrences) === 0) {\r\n                                subscriptions[i] = Number(row.amount)\r\n                            }\r\n                        }\r\n                        subscriptions.map((amount: number | any, i: number) => {\r\n                            if (amount < 0) {\r\n                                const dataObj: CalendarData = {\r\n                                    title: `${row.title}, ${CurrencyFormatter(row.amount)}`,\r\n                                    start: new Date(`${new Date().getFullYear()}-${checkNumber(i + 1)}-${1}`),\r\n                                    end: new Date(`${new Date().getFullYear()}-${checkNumber(i + 1)}-${1}`)\r\n                                }\r\n                                calendarData.push(dataObj)\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (row.type !== 'subscriptions') {\r\n                        const dataObj: CalendarData = {\r\n                            title: `${row.title}, ${CurrencyFormatter(row.amount)}`,\r\n                            start: new Date(row.date),\r\n                            end: new Date(row.date)\r\n                        }\r\n                        calendarData.push(dataObj)\r\n                    }\r\n                })\r\n                setEvents(calendarData)\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }, [])\r\n\r\n    if (events) {\r\n        return (\r\n            <Calendar\r\n                className=\"dashboard-calendar\"\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n            />\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n})\r\n\r\nexport default CalendarPage","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\List\\List.tsx",["189","190"],"import React from 'react'\r\nimport { useAuth, useFirestore } from 'reactfire'\r\nimport store from '../../../redux/store'\r\n\r\n// Components\r\nimport Loader from '../../../components/Loader/Loader'\r\n\r\n// Chakra UI\r\nimport { Box, CloseButton, Tab, Table, TabList, TabPanel, TabPanels, Tabs, Tbody, Td, Text, Th, Thead, Tr } from '@chakra-ui/react'\r\nimport { ChevronLeftIcon, ChevronRightIcon, EditIcon } from '@chakra-ui/icons'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport checkNumber from '../../../utils/checkNumber'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport getPaymentsAndSubscriptionsData from '../../../utils/getPaymentsAndSubscriptionsData'\r\nimport { format } from 'date-fns'\r\nimport EditDataModal from '../../../components/Dashboard/EditDataModal/EditDataModal'\r\nimport { FinancialData } from '../../../types'\r\n\r\n\r\n\r\nconst months: string[] = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n\r\nconst List = React.memo((props: any) => {\r\n    const [allData, setAllData] = React.useState<FinancialData[]>()\r\n\r\n    const [paymentsData, setPaymentsData] = React.useState<any>(null)\r\n    const [subscriptionsData, setSubscriptionsData] = React.useState<any>(null)\r\n\r\n    const [selectedMonth, setSelectedMonth] = React.useState<any>()\r\n    const [selectedYear, setSelectedYear] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        const d = new Date()\r\n        setSelectedMonth(checkNumber(d.getMonth()))\r\n        setSelectedYear(d.getFullYear())\r\n        getData()\r\n        store.subscribe(() => {\r\n            if (store.getState().productChange.value) {\r\n                getData()\r\n                store.dispatch({ type: 'productChange', newState: false })\r\n            }\r\n\r\n            if (!store.getState().editDataModal.value) {\r\n                getData()\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (selectedMonth) {\r\n            updateData()\r\n        }\r\n    }, [selectedMonth, selectedYear, allData])\r\n\r\n    const getData = () => {\r\n        setAllData([])\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((data: any) => {\r\n                setAllData(data)\r\n            })\r\n            .catch(err => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const prevMonth = async () => {\r\n        let selectedMonthInstance: any = selectedMonth\r\n        let selectedYearInstance: any = selectedYear\r\n\r\n        if (selectedMonth > 0) {\r\n            selectedMonthInstance = selectedMonth - 1\r\n        } else {\r\n            selectedMonthInstance = 11\r\n            selectedYearInstance--\r\n        }\r\n        await setSelectedMonth(checkNumber(selectedMonthInstance))\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const nextMonth = async () => {\r\n        let selectedMonthInstance: any = selectedMonth\r\n        let selectedYearInstance: any = selectedYear\r\n\r\n        if (selectedMonth < 11) {\r\n            selectedMonthInstance++\r\n        } else {\r\n            selectedMonthInstance = 0\r\n            selectedYearInstance++\r\n        }\r\n        await setSelectedMonth(checkNumber(selectedMonthInstance))\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const resetDate = async () => {\r\n        const d = new Date()\r\n        await setSelectedMonth(checkNumber(d.getMonth()))\r\n        await setSelectedYear(d.getFullYear())\r\n    }\r\n\r\n    const updateData = () => {\r\n        const paymentsData: any = []\r\n        const subscriptionsData: any = []\r\n        if (allData)\r\n            allData.map((row: FinancialData) => {\r\n                if (row.type === 'subscriptions') {\r\n                    if (row.year === selectedYear) {\r\n                        subscriptionsData.push(row)\r\n                    }\r\n                }\r\n                if (row.type === 'payments') {\r\n                    let date: string[] | string = row.date.split('-')\r\n                    date = `${date[1]}/${date[0]}`\r\n                    const checkDate: string = `${checkNumber(Number(selectedMonth) + 1)}/${selectedYear}`\r\n                    if (checkDate === date) {\r\n                        if (row.type === 'payments') paymentsData.push(row)\r\n                        else subscriptionsData.push(row)\r\n                    }\r\n                }\r\n            })\r\n\r\n        paymentsData.sort((a: FinancialData, b: FinancialData) => {\r\n            const aDate: any = new Date(a.date)\r\n            const bDate: any = new Date(b.date)\r\n            return aDate - bDate\r\n        })\r\n        subscriptionsData.sort((a: FinancialData, b: FinancialData) => {\r\n            const aDate: any = new Date(a.date)\r\n            const bDate: any = new Date(b.date)\r\n            return aDate - bDate\r\n        })\r\n\r\n        setPaymentsData(paymentsData)\r\n        setSubscriptionsData(subscriptionsData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"month-changer px4 py2\">\r\n                <ChevronLeftIcon onClick={() => prevMonth()} />\r\n                <p style={{ cursor: 'pointer' }} onClick={resetDate}>{months[Number(selectedMonth)]}, {selectedYear}</p>\r\n                <ChevronRightIcon onClick={() => nextMonth()} />\r\n            </div>\r\n            <Tabs className=\"dashboard-list\" isFitted variant=\"enclosed\">\r\n                <TabList mb=\"1em\">\r\n                    <Tab\r\n                        _focus={{ borderColor: 'transparent' }}\r\n                    >Payments</Tab>\r\n                    <Tab\r\n                        _focus={{ borderColor: 'transparent' }}\r\n                    >Subscriptions</Tab>\r\n                </TabList>\r\n                <TabPanels>\r\n                    <TabPanel padding={0}>\r\n                        <PaymentsList data={paymentsData} />\r\n                    </TabPanel>\r\n                    <TabPanel padding={0}>\r\n                        <SubscriptionsList data={subscriptionsData} />\r\n                    </TabPanel>\r\n                </TabPanels>\r\n            </Tabs>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default List\r\n\r\nconst PaymentsList = (props: any) => {\r\n    const auth = useAuth()\r\n    const firestore = useFirestore()\r\n\r\n    const [showEditDataModal, setShowEditDataModal] = React.useState(false)\r\n    const [editDataModalData, setEditDataModalData] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setShowEditDataModal(store.getState().editDataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    const removeFromList = async (id: any, type: any) => {\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection(type).doc(id).delete()\r\n            .then(() => {\r\n                toast.success('Payment successfully deleted!')\r\n                store.dispatch({ type: 'productChange', newState: true })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const editData = (data: any) => {\r\n        setEditDataModalData(data)\r\n        store.dispatch({ type: 'setOpenEditDataModal', newVal: true })\r\n        setShowEditDataModal(true)\r\n    }\r\n\r\n    if (props.data) {\r\n        if (props.data.length > 0) {\r\n            return (\r\n                <>\r\n                    {showEditDataModal ? (\r\n                        <EditDataModal data={editDataModalData} isOpen={showEditDataModal} />\r\n                    ) : <></>}\r\n\r\n                    <Table\r\n                        variant=\"simple\"\r\n                        size=\"sm\"\r\n                    >\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Edit</Th>\r\n                                <Th>Title</Th>\r\n                                <Th>Date</Th>\r\n                                <Th>Amount</Th>\r\n                                <Th>Remove</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {props.data.map((row: any, i: number) => (\r\n                                <Tr key={i}>\r\n                                    <Td\r\n                                        onClick={() => editData(row)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <EditIcon style={{ cursor: 'pointer' }} />\r\n                                    </Td>\r\n                                    <Td>{row.title}</Td>\r\n                                    <Td>{format(new Date(row.date), 'dd/MM/yyyy')}</Td>\r\n                                    <Td>{CurrencyFormatter(row.amount)}</Td>\r\n                                    <Td\r\n                                        onClick={() => removeFromList(row.id, row.type)}\r\n                                        pl={30}\r\n                                    ><CloseButton /></Td>\r\n                                </Tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Box p={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className=\"h-100\">\r\n                    <Text fontSize=\"4xl\">No payments found.</Text>\r\n                </Box>\r\n            )\r\n        }\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nconst SubscriptionsList = (props: any) => {\r\n    const auth = useAuth()\r\n    const firestore = useFirestore()\r\n\r\n    const [showEditDataModal, setShowEditDataModal] = React.useState(false)\r\n    const [editDataModalData, setEditDataModalData] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setShowEditDataModal(store.getState().editDataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    const removeFromList = async (id: any, type: any) => {\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection(type).doc(id).delete()\r\n            .then(() => {\r\n                toast.success('Payment successfully deleted!')\r\n                store.dispatch({ type: 'productChange', newState: true })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const editData = (data: any) => {\r\n        setEditDataModalData(data)\r\n        store.dispatch({ type: 'setOpenEditDataModal', newVal: true })\r\n        setShowEditDataModal(true)\r\n    }\r\n\r\n    if (props.data) {\r\n        if (props.data.length > 0) {\r\n            return (\r\n                <>\r\n                    {showEditDataModal ? (\r\n                        <EditDataModal data={editDataModalData} isOpen={showEditDataModal} />\r\n                    ) : <></>}\r\n\r\n                    <Table\r\n                        variant=\"simple\"\r\n                        size=\"sm\"\r\n                    >\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Edit</Th>\r\n                                <Th>Title</Th>\r\n                                <Th>Recurrences</Th>\r\n                                <Th>Amount</Th>\r\n                                <Th>Remove</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {props.data.map((row: any, i: number) => (\r\n                                <Tr key={i}>\r\n                                    <Td\r\n                                        onClick={() => editData(row)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <EditIcon style={{ cursor: 'pointer' }} />\r\n                                    </Td>\r\n                                    <Td>{row.title}</Td>\r\n                                    <Td>{row.recurrences}</Td>\r\n                                    <Td>{CurrencyFormatter(row.amount)}</Td>\r\n                                    <Td\r\n                                        onClick={() => removeFromList(row.id, row.type)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <CloseButton />\r\n                                    </Td>\r\n                                </Tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Box p={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className=\"h-100\">\r\n                    <Text fontSize=\"4xl\">No subscriptions found.</Text>\r\n                </Box>\r\n            )\r\n        }\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Profile\\Profile.tsx",["191","192","193","194","195"],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Loader\\Loader.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\ForgotPassword\\ForgotPassword.tsx",["196","197","198","199","200"],"import React from 'react'\r\nimport { useAuth } from 'reactfire'\r\nimport Firebase from 'firebase'\r\n\r\n// Chakra UI\r\nimport { Alert, AlertDescription, AlertIcon, Box, Button, Flex, FormControl, FormLabel, Heading, Input, InputGroup, InputRightElement, Spinner } from '@chakra-ui/react'\r\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons'\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport { useNavigate } from '@reach/router'\r\n\r\nconst ForgotPassword = (props: any) => {\r\n    const auth = useAuth()\r\n    const navigate = useNavigate()\r\n    const [email, setEmail] = React.useState('')\r\n    const [error, setError] = React.useState('')\r\n    const [isLoading, setIsLoading] = React.useState(false)\r\n\r\n    const handleSubmit = async (e: any) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        try {\r\n            await auth.sendPasswordResetEmail(email)\r\n                .then(() => navigate('/dashboard'))\r\n                .catch((err: Error) => new ErrorHandler(err.message))\r\n        } catch (error) {\r\n            setError('Invalid username or password')\r\n            setIsLoading(false)\r\n            setEmail('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n            <Box p={8} maxWidth=\"400px\" className=\"auth-wrapper\" borderWidth={1} borderRadius={8} boxShadow=\"lg\">\r\n                <Box textAlign=\"center\">\r\n                    <Heading>Reset password</Heading>\r\n                </Box>\r\n\r\n                <Box my={4} textAlign=\"left\">\r\n                    <form onSubmit={(e: any) => handleSubmit(e)}>\r\n                        {error && <ErrorMessage message={error} />}\r\n                        <FormControl isRequired>\r\n                            <FormLabel>Email</FormLabel>\r\n                            <Input\r\n                                type=\"email\"\r\n                                placeholder=\"test@test.com\"\r\n                                size=\"lg\"\r\n                                onChange={(event) => setEmail(event.currentTarget.value)}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            colorScheme=\"blue\"\r\n                            variant=\"outline\"\r\n                            width=\"full\"\r\n                            mt={4}\r\n                        >\r\n                            {isLoading ? (\r\n                                <Spinner color=\"blue.500\" size=\"md\" thickness=\"3px\" />\r\n                            ) : (\r\n                                    'Login'\r\n                                )}\r\n                        </Button>\r\n                    </form>\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n\r\nfunction ErrorMessage({ message }: any) {\r\n    return (\r\n        <Box my={4}>\r\n            <Alert status=\"error\" borderRadius={4}>\r\n                <AlertIcon />\r\n                <AlertDescription>{message}</AlertDescription>\r\n            </Alert>\r\n        </Box>\r\n    );\r\n}","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\index.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\ErrorHandler.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\getPaymentsAndSubscriptionsData.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\editDataModal.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\PFPChanger\\PFPChanger.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\productChange.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\pfpChanger.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\dataModal.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\CurrencyFormatter.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\checkNumber.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\EditDataModal\\EditDataModal.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\DataModal\\DataModal.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\OtherAuth\\OtherAuth.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\NavLink\\NavLink.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Footer\\Footer.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Navbar\\Navbar.tsx",["201"],"import React from 'react'\r\nimport { useAuth } from 'reactfire'\r\nimport './Navbar.scss'\r\n\r\n// Chakra UI\r\nimport { Box, Button, Flex, Heading, Text, useColorMode } from '@chakra-ui/react'\r\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\r\nimport { Link } from '@reach/router'\r\n\r\ninterface Props {\r\n    isSmall: boolean\r\n}\r\n\r\nconst Navbar = (props: Props) => {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n\r\n    const [user, setUser] = React.useState(null)\r\n    const auth = useAuth()\r\n\r\n    React.useEffect(() => {\r\n        const navbarWrapperElement: any = document.querySelector('.navbar-wrapper')\r\n        if (props.isSmall === true) {\r\n            navbarWrapperElement.style.height = '64px'\r\n            navbarWrapperElement.classList.add('navbar-active')\r\n        } else {\r\n            window.addEventListener('scroll', () => {\r\n                if (navbarWrapperElement) {\r\n                    if (window.scrollY > 150) {\r\n                        navbarWrapperElement.style.height = '64px'\r\n                        navbarWrapperElement.classList.add('navbar-active')\r\n                    } else {\r\n                        navbarWrapperElement.style.height = '128px'\r\n                        navbarWrapperElement.classList.remove('navbar-active')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        auth.onAuthStateChanged((user: any) => {\r\n            if (user) setUser(user)\r\n            else setUser(null)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Flex\r\n            as=\"nav\"\r\n            align=\"center\"\r\n            justify=\"space-between\"\r\n            wrap=\"wrap\"\r\n            className=\"navbar-wrapper\"\r\n            padding=\"0 !important\"\r\n        >\r\n            <Box\r\n                display=\"flex\"\r\n                className=\"wrapper\"\r\n            >\r\n                <Flex align=\"center\" mr={5} flexGrow={1}>\r\n                    <Heading as=\"h1\" size=\"lg\" letterSpacing={\"-.1rem\"}>\r\n                        <Link to=\"/\">\r\n                            Budget planner\r\n                        </Link>\r\n                    </Heading>\r\n                </Flex>\r\n\r\n                <Box display={{ base: \"block\", md: \"none\" }}>\r\n                    <svg\r\n                        fill=\"white\"\r\n                        width=\"12px\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <title>Menu</title>\r\n                        <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n                    </svg>\r\n                </Box>\r\n\r\n                <Box\r\n                    width={{ sm: \"full\", md: \"auto\" }}\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <MenuItems>About</MenuItems>\r\n                    <MenuItems>How it works</MenuItems>\r\n                    <Button\r\n                        variant=\"ghost\"\r\n                        onClick={toggleColorMode}\r\n                        w={10}\r\n                        mr={25}\r\n                        _hover={{\r\n                            bgColor: 'rgba(255, 255, 255, 0.1)'\r\n                        }}\r\n                    >\r\n                        {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n                    </Button>\r\n                </Box>\r\n\r\n\r\n                <Box mt={{ base: 4, md: 0 }}>\r\n                    {user ? (\r\n                        <>\r\n                            <Link to=\"/dashboard\"><Button variant=\"outline\" colorScheme=\"gray\">Dashboard</Button></Link>\r\n                            <Button onClick={() => auth.signOut()} variant=\"outline\" colorScheme=\"gray\" ml={4}>Logout</Button>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                <Link to=\"/login\"><Button bg=\"transparent\" border=\"1px\">Log in</Button></Link>\r\n                                <Link to=\"/signup\"><Button bg=\"transparent\" border=\"1px\" ml={4}>Sign up</Button></Link>\r\n                            </>\r\n                        )}\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\nfunction scrollTo(element: any) {\r\n    element = element.replace(/\\s+/g, '-').toLowerCase()\r\n    const el = document.getElementById(element)\r\n    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n}\r\n\r\nconst MenuItems = ({ children }: any) => (\r\n    <Text onClick={() => scrollTo(children)} cursor=\"pointer\" mt={{ base: 4, md: 0 }} mr={6} display=\"block\">\r\n        {children}\r\n    </Text>\r\n)",{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":1,"column":10,"nodeType":"208","messageId":"209","endLine":1,"endColumn":21},{"ruleId":"206","severity":1,"message":"210","line":1,"column":23,"nodeType":"208","messageId":"209","endLine":1,"endColumn":29},{"ruleId":"206","severity":1,"message":"211","line":38,"column":12,"nodeType":"208","messageId":"209","endLine":38,"endColumn":16},{"ruleId":"212","severity":1,"message":"213","line":48,"column":8,"nodeType":"214","endLine":48,"endColumn":10,"suggestions":"215"},{"ruleId":"206","severity":1,"message":"216","line":5,"column":13,"nodeType":"208","messageId":"209","endLine":5,"endColumn":19},{"ruleId":"206","severity":1,"message":"217","line":12,"column":8,"nodeType":"208","messageId":"209","endLine":12,"endColumn":12},{"ruleId":"206","severity":1,"message":"218","line":13,"column":8,"nodeType":"208","messageId":"209","endLine":13,"endColumn":14},{"ruleId":"206","severity":1,"message":"219","line":13,"column":33,"nodeType":"208","messageId":"209","endLine":13,"endColumn":37},{"ruleId":"206","severity":1,"message":"220","line":13,"column":39,"nodeType":"208","messageId":"209","endLine":13,"endColumn":49},{"ruleId":"206","severity":1,"message":"221","line":13,"column":51,"nodeType":"208","messageId":"209","endLine":13,"endColumn":59},{"ruleId":"206","severity":1,"message":"222","line":13,"column":61,"nodeType":"208","messageId":"209","endLine":13,"endColumn":69},{"ruleId":"206","severity":1,"message":"223","line":14,"column":10,"nodeType":"208","messageId":"209","endLine":14,"endColumn":25},{"ruleId":"206","severity":1,"message":"216","line":18,"column":13,"nodeType":"208","messageId":"209","endLine":18,"endColumn":19},{"ruleId":"206","severity":1,"message":"224","line":19,"column":8,"nodeType":"208","messageId":"209","endLine":19,"endColumn":12},{"ruleId":"206","severity":1,"message":"225","line":20,"column":8,"nodeType":"208","messageId":"209","endLine":20,"endColumn":15},{"ruleId":"206","severity":1,"message":"226","line":55,"column":12,"nodeType":"208","messageId":"209","endLine":55,"endColumn":20},{"ruleId":"206","severity":1,"message":"227","line":57,"column":12,"nodeType":"208","messageId":"209","endLine":57,"endColumn":23},{"ruleId":"206","severity":1,"message":"228","line":57,"column":25,"nodeType":"208","messageId":"209","endLine":57,"endColumn":39},{"ruleId":"212","severity":1,"message":"229","line":70,"column":8,"nodeType":"214","endLine":70,"endColumn":10,"suggestions":"230"},{"ruleId":"206","severity":1,"message":"231","line":35,"column":12,"nodeType":"208","messageId":"209","endLine":35,"endColumn":25},{"ruleId":"206","severity":1,"message":"232","line":36,"column":12,"nodeType":"208","messageId":"209","endLine":36,"endColumn":24},{"ruleId":"206","severity":1,"message":"233","line":43,"column":12,"nodeType":"208","messageId":"209","endLine":43,"endColumn":24},{"ruleId":"206","severity":1,"message":"234","line":44,"column":12,"nodeType":"208","messageId":"209","endLine":44,"endColumn":29},{"ruleId":"212","severity":1,"message":"235","line":52,"column":8,"nodeType":"214","endLine":52,"endColumn":70,"suggestions":"236"},{"ruleId":"212","severity":1,"message":"237","line":52,"column":23,"nodeType":"238","endLine":52,"endColumn":33},{"ruleId":"212","severity":1,"message":"237","line":52,"column":35,"nodeType":"238","endLine":52,"endColumn":45},{"ruleId":"212","severity":1,"message":"237","line":52,"column":47,"nodeType":"238","endLine":52,"endColumn":57},{"ruleId":"212","severity":1,"message":"237","line":52,"column":59,"nodeType":"238","endLine":52,"endColumn":69},{"ruleId":"239","severity":1,"message":"240","line":100,"column":46,"nodeType":"241","messageId":"242","endLine":100,"endColumn":48},{"ruleId":"243","severity":1,"message":"244","line":116,"column":54,"nodeType":"245","messageId":"246","endLine":116,"endColumn":56},{"ruleId":"239","severity":1,"message":"240","line":127,"column":60,"nodeType":"241","messageId":"242","endLine":127,"endColumn":62},{"ruleId":"239","severity":1,"message":"240","line":179,"column":39,"nodeType":"241","messageId":"242","endLine":179,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":70,"column":37,"nodeType":"241","messageId":"242","endLine":70,"endColumn":39},{"ruleId":"239","severity":1,"message":"240","line":78,"column":77,"nodeType":"241","messageId":"242","endLine":78,"endColumn":79},{"ruleId":"212","severity":1,"message":"247","line":102,"column":8,"nodeType":"214","endLine":102,"endColumn":10,"suggestions":"248"},{"ruleId":"212","severity":1,"message":"249","line":57,"column":8,"nodeType":"214","endLine":57,"endColumn":46,"suggestions":"250"},{"ruleId":"239","severity":1,"message":"240","line":106,"column":46,"nodeType":"241","messageId":"242","endLine":106,"endColumn":48},{"ruleId":"206","severity":1,"message":"251","line":42,"column":25,"nodeType":"208","messageId":"209","endLine":42,"endColumn":39},{"ruleId":"212","severity":1,"message":"252","line":66,"column":8,"nodeType":"214","endLine":66,"endColumn":10,"suggestions":"253"},{"ruleId":"239","severity":1,"message":"240","line":74,"column":58,"nodeType":"241","messageId":"242","endLine":74,"endColumn":60},{"ruleId":"239","severity":1,"message":"240","line":105,"column":42,"nodeType":"241","messageId":"242","endLine":105,"endColumn":44},{"ruleId":"239","severity":1,"message":"240","line":111,"column":37,"nodeType":"241","messageId":"242","endLine":111,"endColumn":39},{"ruleId":"206","severity":1,"message":"254","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":16},{"ruleId":"206","severity":1,"message":"255","line":6,"column":105,"nodeType":"208","messageId":"209","endLine":6,"endColumn":115},{"ruleId":"206","severity":1,"message":"256","line":6,"column":117,"nodeType":"208","messageId":"209","endLine":6,"endColumn":134},{"ruleId":"206","severity":1,"message":"257","line":7,"column":10,"nodeType":"208","messageId":"209","endLine":7,"endColumn":18},{"ruleId":"206","severity":1,"message":"258","line":7,"column":20,"nodeType":"208","messageId":"209","endLine":7,"endColumn":31},{"ruleId":"212","severity":1,"message":"259","line":43,"column":8,"nodeType":"214","endLine":43,"endColumn":10,"suggestions":"260"},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"@typescript-eslint/no-unused-vars","'ThunkAction' is defined but never used.","Identifier","unusedVar","'Action' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["263"],"'ROUTES' is defined but never used.","'Home' is defined but never used.","'Donate' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'ChevronDownIcon' is defined but never used.","'List' is defined but never used.","'NoMatch' is defined but never used.","'settings' is assigned a value but never used.","'displayName' is assigned a value but never used.","'setDisplayName' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'auth.currentUser?.uid' and 'database'. Either include them or remove the dependency array.",["264"],"'selectedMonth' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","'paymentsData' is assigned a value but never used.","'subscriptionsData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getData' and 'initChart'. Either include them or remove the dependency array.",["265"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'getPaymentsAndSubscriptionsData'. Either include it or remove the dependency array.",["266"],"React Hook React.useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["267"],"'setDateFormats' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'auth.currentUser?.photoURL'. Either include it or remove the dependency array.",["268"],"'Firebase' is defined but never used.","'InputGroup' is defined but never used.","'InputRightElement' is defined but never used.","'ViewIcon' is defined but never used.","'ViewOffIcon' is defined but never used.","React Hook React.useEffect has missing dependencies: 'auth' and 'props.isSmall'. Either include them or remove the dependency array.",["269"],"no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [auth]",{"range":"284","text":"285"},"Update the dependencies array to be: [auth.currentUser?.uid, database]",{"range":"286","text":"287"},"Update the dependencies array to be: [getData, initChart, selectedYear]",{"range":"288","text":"289"},"Update the dependencies array to be: [getPaymentsAndSubscriptionsData]",{"range":"290","text":"291"},"Update the dependencies array to be: [selectedMonth, selectedYear, allData, updateData]",{"range":"292","text":"293"},"Update the dependencies array to be: [auth.currentUser?.photoURL]",{"range":"294","text":"295"},"Update the dependencies array to be: [auth, props.isSmall]",{"range":"296","text":"297"},[1499,1501],"[auth]",[2285,2287],"[auth.currentUser?.uid, database]",[2035,2097],"[getData, initChart, selectedYear]",[4202,4204],"[getPaymentsAndSubscriptionsData]",[2091,2129],"[selectedMonth, selectedYear, allData, updateData]",[2430,2432],"[auth.currentUser?.photoURL]",[1478,1480],"[auth, props.isSmall]"]