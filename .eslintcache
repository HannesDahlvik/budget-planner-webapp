[{"D:\\dev\\webdev\\budget-planner\\webapp\\src\\App.tsx":"1","D:\\dev\\webdev\\budget-planner\\webapp\\src\\index.tsx":"2","D:\\dev\\webdev\\budget-planner\\webapp\\src\\config.ts":"3","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Public\\Public.tsx":"4","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Dashboard\\Dashboard.tsx":"5","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Loader\\Loader.tsx":"6","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Home\\Home.tsx":"7","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Login\\Login.tsx":"8","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Signup\\Signup.tsx":"9","D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\NoMatch\\NoMatch.tsx":"10","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\OtherAuth\\OtherAuth.tsx":"11","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Frontpage\\Frontpage.tsx":"12","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\CurrencyFormatter.ts":"13","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Calendar\\Calendar.tsx":"14","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\checkNumber.ts":"15","D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\PrivateRoute\\PrivateRoute.tsx":"16","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\DataModal\\DataModal.tsx":"17","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\ErrorHandler.ts":"18","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\store.ts":"19","D:\\dev\\webdev\\budget-planner\\webapp\\src\\constants\\routes.ts":"20","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\index.ts":"21","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\dataModal.ts":"22","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Navbar\\Navbar.tsx":"23","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Profile\\Profile.tsx":"24","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\PFPChanger\\PFPChanger.tsx":"25","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\pfpChanger.ts":"26","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\List\\List.tsx":"27","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\getPaymentsAndSubscriptionsData.ts":"28","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\productChange.ts":"29","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Footer\\Footer.tsx":"30","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Donate\\Donate.tsx":"31","D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\editDataModal.ts":"32","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\EditDataModal\\EditDataModal.tsx":"33","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\NavLink\\NavLink.tsx":"34"},{"size":2399,"mtime":1613081411132,"results":"35","hashOfConfig":"36"},{"size":1115,"mtime":1613073494524,"results":"37","hashOfConfig":"36"},{"size":602,"mtime":1612507316782,"results":"38","hashOfConfig":"36"},{"size":661,"mtime":1613081066510,"results":"39","hashOfConfig":"36"},{"size":6241,"mtime":1613080197736,"results":"40","hashOfConfig":"36"},{"size":341,"mtime":1612631481514,"results":"41","hashOfConfig":"36"},{"size":1578,"mtime":1613078921817,"results":"42","hashOfConfig":"36"},{"size":6689,"mtime":1613081092014,"results":"43","hashOfConfig":"36"},{"size":7338,"mtime":1613081260126,"results":"44","hashOfConfig":"36"},{"size":1065,"mtime":1613080877753,"results":"45","hashOfConfig":"36"},{"size":1342,"mtime":1613081105348,"results":"46","hashOfConfig":"36"},{"size":16156,"mtime":1612788617763,"results":"47","hashOfConfig":"36"},{"size":766,"mtime":1612613653109,"results":"48","hashOfConfig":"36"},{"size":4455,"mtime":1613067374148,"results":"49","hashOfConfig":"36"},{"size":107,"mtime":1612632001307,"results":"50","hashOfConfig":"36"},{"size":447,"mtime":1613080097482,"results":"51","hashOfConfig":"36"},{"size":5657,"mtime":1613076792764,"results":"52","hashOfConfig":"36"},{"size":179,"mtime":1612648960643,"results":"53","hashOfConfig":"36"},{"size":357,"mtime":1612698706550,"results":"54","hashOfConfig":"36"},{"size":175,"mtime":1612525092483,"results":"55","hashOfConfig":"36"},{"size":311,"mtime":1612851936543,"results":"56","hashOfConfig":"36"},{"size":374,"mtime":1612710943679,"results":"57","hashOfConfig":"36"},{"size":4596,"mtime":1613076122402,"results":"58","hashOfConfig":"36"},{"size":14940,"mtime":1612789736460,"results":"59","hashOfConfig":"36"},{"size":8076,"mtime":1612772718985,"results":"60","hashOfConfig":"36"},{"size":361,"mtime":1612769386147,"results":"61","hashOfConfig":"36"},{"size":12444,"mtime":1613067366009,"results":"62","hashOfConfig":"36"},{"size":1062,"mtime":1612774269472,"results":"63","hashOfConfig":"36"},{"size":272,"mtime":1612786292622,"results":"64","hashOfConfig":"36"},{"size":915,"mtime":1613076450319,"results":"65","hashOfConfig":"36"},{"size":187,"mtime":1613071179743,"results":"66","hashOfConfig":"36"},{"size":374,"mtime":1612853910479,"results":"67","hashOfConfig":"36"},{"size":3165,"mtime":1612854072094,"results":"68","hashOfConfig":"36"},{"size":350,"mtime":1613075119746,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kba895",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"D:\\dev\\webdev\\budget-planner\\webapp\\src\\App.tsx",["147","148","149"],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\index.tsx",[],["150","151"],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\config.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Public\\Public.tsx",["152","153","154"],"import React from 'react'\r\nimport './Public.scss'\r\n\r\n// Router\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\n// Components\r\nimport Navbar from '../../components/Public/Navbar/Navbar';\r\nimport Footer from '../../components/Public/Footer/Footer';\r\n\r\n// Pages\r\nimport Home from '../../pages/Home/Home';\r\nimport Donate from '../../pages/Donate/Donate';\r\n\r\nconst Public = (props: any) => {\r\n    return (\r\n        <div className=\"root\">\r\n            <Navbar isSmall={true} />\r\n\r\n            <div className=\"public-page wrapper\">\r\n                {props.children}\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Public","D:\\dev\\webdev\\budget-planner\\webapp\\src\\containers\\Dashboard\\Dashboard.tsx",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React from 'react'\r\nimport { useAuth, useDatabase } from 'reactfire'\r\nimport './Dashboard.scss'\r\n\r\n// Router\r\nimport { Link, useLocation, useNavigate } from '@reach/router'\r\nimport NavLink from '../../components/NavLink/NavLink'\r\n\r\n// Components\r\nimport Loader from '../../components/Loader/Loader'\r\n\r\n// Pages\r\nimport Frontpage from '../../pages/Dashboard/Frontpage/Frontpage'\r\nimport Calendar from '../../pages/Dashboard/Calendar/Calendar'\r\nimport Profile from '../../pages/Dashboard/Profile/Profile'\r\n\r\n// Chakra UI\r\nimport { Button, Divider, Grid, Menu, MenuButton, MenuItem, MenuList, Text, useColorMode } from '@chakra-ui/react'\r\nimport { ChevronDownIcon } from '@chakra-ui/icons'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../utils/ErrorHandler'\r\nimport * as ROUTES from '../../constants/routes'\r\nimport List from '../../pages/Dashboard/List/List'\r\nimport NoMatch from '../../hoc/NoMatch/NoMatch'\r\n\r\nconst Dashboard = (props: any) => {\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n    const database = useDatabase()\r\n    const auth = useAuth()\r\n    const links = [\r\n        {\r\n            title: 'Frontpage',\r\n            url: '/dashboard/frontpage',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'Calendar',\r\n            url: '/dashboard/calendar',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'List',\r\n            url: '/dashboard/list',\r\n            active: false\r\n        },\r\n        {\r\n            title: 'Calculator',\r\n            url: '/dashboard/calculator',\r\n            active: false\r\n        },\r\n        {\r\n            divider: true\r\n        },\r\n        {\r\n            title: 'Profile',\r\n            url: '/dashboard/profile',\r\n            active: false\r\n        }\r\n    ]\r\n    const [settings, setSettings] = React.useState()\r\n    const [readyToRender, setReadyToRender] = React.useState(false)\r\n    const [displayName, setDisplayName] = React.useState<string | null | undefined>('')\r\n\r\n    React.useEffect(() => {\r\n        if (location.pathname === '/dashboard') navigate('/dashboard/frontpage')\r\n\r\n        database.ref(`${auth.currentUser?.uid}/settings`)\r\n            .once('value', (res: firebase.default.database.DataSnapshot) => {\r\n                localStorage.setItem('settings', JSON.stringify(res.val()))\r\n                setSettings(res.val())\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        fetch('https://api.exchangeratesapi.io/latest').then(res => res.json().then((data) => {\r\n            localStorage.setItem('exchangerates', JSON.stringify(data.rates))\r\n            setReadyToRender(true)\r\n        }))\r\n    }, [])\r\n\r\n    if (readyToRender) {\r\n        return (\r\n            <>\r\n                <Grid className=\"dashboard-wrapper\">\r\n                    <div className=\"sidebar\">\r\n                        <div className=\"sidebar-top\">\r\n                            {/* <Menu>\r\n                                    <MenuButton\r\n                                        as={Button}\r\n                                        fontSize=\"xl\"\r\n                                        fontWeight=\"700\"\r\n                                        display=\"flex\"\r\n                                        justifyContent=\"center\"\r\n                                        alignItems=\"center\"\r\n                                        rightIcon={<ChevronDownIcon />}\r\n                                    >\r\n                                        {auth.currentUser?.displayName}\r\n                                    </MenuButton>\r\n                                    <MenuList>\r\n                                        <MenuItem as=\"a\" href={ROUTES.PUBLIC}>Home</MenuItem>\r\n                                        <MenuItem as=\"a\" href={`${ROUTES.DASHBOARD}/profile`}>Profile</MenuItem>\r\n                                        <MenuItem as=\"button\" onClick={() => auth.signOut()}>Log out</MenuItem>\r\n                                    </MenuList>\r\n                                </Menu> */}\r\n                            <Text\r\n                                fontSize=\"24px\"\r\n                                fontWeight=\"700\"\r\n                            >\r\n                                <Link to=\"/\">\r\n                                    {auth.currentUser?.displayName}\r\n                                </Link>\r\n                            </Text>\r\n                        </div>\r\n                        <div className=\"sidebar-content\">\r\n                            {links.map((row: any, i: number) => {\r\n                                if (row.divider) {\r\n                                    return <Divider\r\n                                        my={4}\r\n                                        key={i}\r\n                                    />\r\n                                } else {\r\n                                    return (\r\n                                        <NavLink\r\n                                            to={row.url}\r\n                                            key={i}\r\n                                        >\r\n                                            {row.title}\r\n                                        </NavLink>\r\n                                    )\r\n                                }\r\n                            })}\r\n                            <Link\r\n                                to=\"/\"\r\n                                onClick={() => auth.signOut()}\r\n                            >\r\n                                Logout\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"sidebar-bottom\">\r\n                            <ThemeToggler />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dashboard\">\r\n                        {props.children}\r\n                    </div>\r\n                </Grid>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default Dashboard\r\n\r\nfunction ThemeToggler() {\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    return (\r\n        <Button size=\"sm\" onClick={toggleColorMode}>\r\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\r\n        </Button>\r\n    )\r\n}","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Loader\\Loader.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Home\\Home.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Login\\Login.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Signup\\Signup.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\NoMatch\\NoMatch.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\OtherAuth\\OtherAuth.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Frontpage\\Frontpage.tsx",["170","171","172","173","174","175","176","177","178","179","180","181","182","183"],"import React from 'react'\r\nimport { useAuth, useDatabase, useFirestore } from 'reactfire'\r\n\r\nimport { format } from 'date-fns'\r\n\r\n// Chakra UI\r\nimport { Box, Button, Grid, Skeleton, Stat, StatArrow, StatGroup, StatHelpText, StatLabel, StatNumber } from '@chakra-ui/react'\r\nimport { ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons'\r\n\r\n// Chart\r\nimport Chart from 'react-apexcharts'\r\nimport { ApexOptions } from 'apexcharts'\r\nimport checkNumber from '../../../utils/checkNumber'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport DataModal from '../../../components/Dashboard/DataModal/DataModal'\r\nimport Loader from '../../../components/Loader/Loader'\r\nimport store from '../../../redux/store'\r\nimport getPaymentsAndSubscriptionsData from '../../../utils/getPaymentsAndSubscriptionsData'\r\n\r\nconst Frontpage = (props: any) => {\r\n    const database = useDatabase()\r\n    const auth = useAuth()\r\n    const firestore = useFirestore()\r\n\r\n    const [readyToRender, setReadyToRender] = React.useState(false)\r\n\r\n    const [dialogs, setDialogs] = React.useState([false, false, false, false])\r\n    const [selectedYear, setSelectedYear] = React.useState<any>(new Date().getFullYear())\r\n    const [monthlyTotal, setMonthlyTotal] = React.useState(0)\r\n    const [selectedMonth, setSelectedMonth] = React.useState()\r\n    const [selectedDate, setSelectedDate] = React.useState<any>()\r\n\r\n    const [renderChart, setRenderChart] = React.useState(false)\r\n\r\n    const [salary, setSalary] = React.useState(0)\r\n    const [expences, setExpences] = React.useState(0)\r\n\r\n    const [paymentsData, setPaymentsData] = React.useState()\r\n    const [subscriptionsData, setSubscriptionsData] = React.useState()\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<ApexOptions>()\r\n    const [chartSeries, setChartSeries] = React.useState<ApexAxisChartSeries>()\r\n\r\n    React.useEffect(() => {\r\n        getData()\r\n        initChart()\r\n    }, [selectedYear, dialogs[0], dialogs[1], dialogs[2], dialogs[3]])\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setDialogs(store.getState().dataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    // Year changer\r\n    const prevYear = async () => {\r\n        let selectedYearInstance = await selectedYear\r\n        selectedYearInstance--\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const nextYear = async () => {\r\n        let selectedYearInstance = await selectedYear\r\n        selectedYearInstance++\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const resetDate = async () => {\r\n        const d = new Date()\r\n        setSelectedMonth(checkNumber(d.getMonth()))\r\n        setSelectedYear(d.getFullYear())\r\n    }\r\n\r\n    const getData = async () => {\r\n        await database.ref(`${auth.currentUser?.uid}/salary`).on('value', (snapshot: any) => {\r\n            setSalary(snapshot.val() * 12)\r\n        })\r\n    }\r\n\r\n    const handleDialogOpen = (index: any) => {\r\n        let tempArr = [false, false, false, false]\r\n        tempArr[index] = true\r\n        store.dispatch({ type: 'setOpenModal', newArr: tempArr })\r\n        setDialogs(tempArr)\r\n        setSelectedDate(format(Date.now(), 'yyyy-MM-dd'))\r\n    }\r\n\r\n    const initChart = async () => {\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((res) => {\r\n                const moneyUsageArr: any = Array.from({ length: 12 }).fill(0)\r\n                const subscriptionsData: any = Array.from({ length: 12 }).fill(0)\r\n                const paymentsData: any = Array.from({ length: 12 }).fill(0)\r\n\r\n                res.map((row: any) => {\r\n                    if (row.type === 'subscriptions') {\r\n                        if (row.year === selectedYear) {\r\n                            let subscriptions: any = Array.from({ length: 12 }).fill(0)\r\n                            for (let i = 0; i < subscriptions.length; i++) {\r\n                                if (i % (12 / row.recurrences) === 0) subscriptions[i] = Number(Math.abs(row.amount))\r\n                            }\r\n\r\n                            for (let i = 0; i < 12; i++) {\r\n                                subscriptionsData[i] += parseFloat(String(Math.abs(subscriptions[i])))\r\n                                moneyUsageArr[i] += parseFloat(String(Math.abs(row.amount)))\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        if ((row.date).split('-')[0] == selectedYear) {\r\n                            const month = parseInt(row.date.split('-')[1])\r\n                            paymentsData[month - 1] += parseFloat(String(Math.abs(row.amount)))\r\n                            moneyUsageArr[month - 1] += parseFloat(String(Math.abs(row.amount)))\r\n                        }\r\n                    }\r\n                })\r\n\r\n                calculateCurrentMonthTotal(res, subscriptionsData)\r\n                calculateExpences(paymentsData, subscriptionsData)\r\n\r\n                moneyUsageArr.map((row: any, i: number) => {\r\n                    moneyUsageArr[i] = parseFloat(row.toFixed(2))\r\n                })\r\n\r\n                let payments: any = paymentsData\r\n                let subscriptions: any = subscriptionsData\r\n                for (let i: number = 0; i < 12; i++) {\r\n                    payments[i] = parseFloat(payments[i].toFixed(2))\r\n                    subscriptions[i] = parseFloat(subscriptions[i].toFixed(2))\r\n                }\r\n\r\n                setPaymentsData(payments)\r\n                setSubscriptionsData(subscriptions)\r\n\r\n                const getMinMaxValues = (func: any, array: any[]) => func.apply(Math, array)\r\n                const minimum = getMinMaxValues(Math.min, paymentsData)\r\n                const maximum = getMinMaxValues(Math.max, moneyUsageArr)\r\n\r\n                setChartOptions({\r\n                    chart: {\r\n                        toolbar: { show: false },\r\n                        foreColor: '#808080'\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        theme: 'dark',\r\n                    },\r\n                    dataLabels: { enabled: false },\r\n                    xaxis: { categories: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"] },\r\n                    yaxis: {\r\n                        min: minimum,\r\n                        max: maximum + 10\r\n                    }\r\n                })\r\n                setChartSeries([\r\n                    {\r\n                        name: \"Payments\",\r\n                        data: paymentsData\r\n                    },\r\n                    {\r\n                        name: \"Subscriptions\",\r\n                        data: subscriptionsData\r\n                    }\r\n                ])\r\n                setRenderChart(true)\r\n                setReadyToRender(true)\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const calculateCurrentMonthTotal = (data: any, subscriptionsData: any[]) => {\r\n        let monthlyTotal = 0\r\n        data.map((row: any) => {\r\n            if (row.type === 'payments') {\r\n                let date = row.date.split('-')\r\n                date = `${date[1]}/${date[0]}`\r\n                const checkDate = `${checkNumber(new Date().getMonth() + 1)}/${selectedYear}`\r\n                if (date === checkDate) monthlyTotal += row.amount\r\n            }\r\n        })\r\n        monthlyTotal += -Math.abs(subscriptionsData[new Date().getMonth()])\r\n        setMonthlyTotal(Number(monthlyTotal.toFixed(2)))\r\n    }\r\n\r\n    const calculateExpences = async (paymentsData: any[], subscriptionsData: any[]) => {\r\n        let expences: number = 0\r\n        paymentsData.map((row: any) => expences += row)\r\n        subscriptionsData.map((row: any) => expences += row)\r\n        setExpences(-Math.abs(Number(expences)))\r\n    }\r\n\r\n    if (readyToRender) {\r\n        return (\r\n            <div className=\"dashboard-frontpage\">\r\n                <Grid templateColumns=\"1fr\" p={4} gap={5}>\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box>\r\n                            <div className=\"month-changer px4 py2\">\r\n                                <ChevronLeftIcon onClick={() => prevYear()} />\r\n                                <p style={{ cursor: 'pointer' }} onClick={resetDate}>{selectedYear}</p>\r\n                                <ChevronRightIcon onClick={() => nextYear()} />\r\n                            </div>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid templateColumns=\"1fr 1fr\" p={6} gap={5} templateRows=\"200px\">\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box className=\"h-100\">\r\n                            <Grid templateColumns=\"repeat(2, 1fr)\" className=\"h-100\" style={{ alignItems: 'center' }}>\r\n                                <Button colorScheme=\"green\" className=\"m2\" onClick={() => handleDialogOpen(0)}>Add payment</Button>\r\n                                <Button colorScheme=\"green\" className=\"m2\" onClick={() => handleDialogOpen(1)}>Add subscription</Button>\r\n                                <Button colorScheme=\"blue\" className=\"m2\" onClick={() => handleDialogOpen(2)}>Add received payment</Button>\r\n                                <Button colorScheme=\"blue\" className=\"m2\" onClick={() => handleDialogOpen(3)}>Edit salary</Button>\r\n                            </Grid>\r\n                            {<DataModal open={dialogs[0]} title=\"Add payment\" type=\"payments\" negOrPos=\"negative\" index={0} />}\r\n                            {<DataModal open={dialogs[1]} title=\"Add subscription\" type=\"subscriptions\" negOrPos=\"negative\" index={1} />}\r\n                            {<DataModal open={dialogs[2]} title=\"Add received payment\" type=\"payments\" negOrPos=\"positive\" index={2} />}\r\n                            {<DataModal open={dialogs[3]} title=\"Edit salary\" type=\"salary\" negOrPos=\"positive\" index={3} />}\r\n                        </Box>\r\n                    </Box>\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box p={4} className=\"h-100\">\r\n                            <StatGroup>\r\n                                <Grid gridTemplateColumns=\"1fr 1fr\" gridTemplateRows=\"1fr 1fr\" className=\"w-100\">\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly income</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {salary !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(salary)}</StatNumber>\r\n                                                    <StatArrow type={(salary % 100) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(salary % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly expences</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {expences !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(expences)}</StatNumber>\r\n                                                    <StatArrow type={(expences % 100) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(expences % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Yearly profit</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {(salary || expences) !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(salary + expences)}</StatNumber>\r\n                                                    <StatArrow type={(salary % expences) > 0 ? 'increase' : 'decrease'} />\r\n                                                    {(salary % expences).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                    <Stat>\r\n                                        <StatLabel>Month total</StatLabel>\r\n                                        <StatHelpText>\r\n                                            {monthlyTotal !== null ? (\r\n                                                <>\r\n                                                    <StatNumber>{CurrencyFormatter(monthlyTotal)}</StatNumber>\r\n                                                    <StatArrow type=\"decrease\" />\r\n                                                    {(monthlyTotal % 100).toFixed(2)}%\r\n                                                    </>\r\n                                            ) : (\r\n                                                    <>\r\n                                                        <Skeleton height=\"35px\" />\r\n                                                        <Skeleton mt={1} height=\"15px\" />\r\n                                                    </>\r\n                                                )}\r\n                                        </StatHelpText>\r\n                                    </Stat>\r\n                                </Grid>\r\n                            </StatGroup>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid templateColumns=\"1fr\" p={6} gap={5} templateRows=\"350px\">\r\n                    <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n                        <Box p={4} className=\"h-100\">\r\n                            {renderChart ? (\r\n                                <Chart\r\n                                    height=\"100%\"\r\n                                    options={chartOptions}\r\n                                    series={chartSeries}\r\n                                    type=\"area\"\r\n                                />\r\n                            ) : (\r\n                                    <Skeleton height=\"100%\" />\r\n                                )}\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default Frontpage","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\CurrencyFormatter.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Calendar\\Calendar.tsx",["184","185","186"],"import React from 'react'\r\nimport './Calendar.scss'\r\nimport { useAuth, useFirestore } from 'reactfire'\r\n\r\n// CSS\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\n\r\nimport format from 'date-fns/format'\r\nimport parse from 'date-fns/parse'\r\nimport startOfWeek from 'date-fns/startOfWeek'\r\nimport getDay from 'date-fns/getDay'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport checkNumber from '../../../utils/checkNumber'\r\n\r\n// Components\r\nimport Loader from '../../../components/Loader/Loader'\r\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar'\r\n\r\nconst locales = {\r\n    'en-US': require('date-fns/locale/en-US'),\r\n}\r\nconst localizer = dateFnsLocalizer({\r\n    format,\r\n    parse,\r\n    startOfWeek,\r\n    getDay,\r\n    locales,\r\n})\r\n\r\nconst CalendarPage = (props: any) => {\r\n    const [events, setEvents] = React.useState()\r\n    const firestore = useFirestore()\r\n    const auth = useAuth()\r\n\r\n    const getPaymentsAndSubscriptionsData = async () => {\r\n        const data: any = []\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection('payments').get()\r\n            .then((res: firebase.default.firestore.QuerySnapshot) => {\r\n                res.forEach((doc: firebase.default.firestore.QueryDocumentSnapshot) => {\r\n                    let obj = doc.data()\r\n                    obj.id = doc.id\r\n                    obj.type = 'payments'\r\n                    data.push(obj)\r\n                })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection('subscriptions').get()\r\n            .then((res: firebase.default.firestore.QuerySnapshot) => {\r\n                res.forEach((doc: firebase.default.firestore.QueryDocumentSnapshot) => {\r\n                    let obj = doc.data()\r\n                    obj.id = doc.id\r\n                    obj.type = 'subscriptions'\r\n                    data.push(obj)\r\n                })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n        return data\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((data: any) => {\r\n                const calendarData: any = []\r\n                data.map((row: any) => {\r\n                    if (row.type === 'subscriptions') {\r\n                        let subscriptions = Array.from({ length: 12 }).fill(0)\r\n                        for (let i = 0; i < subscriptions.length; i++) {\r\n                            if (i % (12 / row.recurrences) === 0) {\r\n                                subscriptions[i] = Number(row.amount)\r\n                            }\r\n                        }\r\n                        subscriptions.map((amount: any, i: number) => {\r\n                            if (amount < 0) {\r\n                                const dataObj = {\r\n                                    title: `${row.title}, ${CurrencyFormatter(row.amount)}`,\r\n                                    start: new Date(`${new Date().getFullYear()}-${checkNumber(i + 1)}-${1}`),\r\n                                    end: new Date(`${new Date().getFullYear()}-${checkNumber(i + 1)}-${1}`)\r\n                                }\r\n                                calendarData.push(dataObj)\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (row.type !== 'subscriptions') {\r\n                        const dataObj = {\r\n                            title: `${row.title}, ${CurrencyFormatter(row.amount)}`,\r\n                            start: new Date(row.date),\r\n                            end: new Date(row.date),\r\n                            amount: CurrencyFormatter(row.amount)\r\n                        }\r\n                        calendarData.push(dataObj)\r\n                    }\r\n                })\r\n                setEvents(calendarData)\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }, [])\r\n\r\n    if (events) {\r\n        return (\r\n            <Calendar\r\n                className=\"dashboard-calendar\"\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n            />\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default CalendarPage","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\checkNumber.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\hoc\\PrivateRoute\\PrivateRoute.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\DataModal\\DataModal.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\ErrorHandler.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\store.ts",["187","188"],"import { ThunkAction, Action, createStore } from '@reduxjs/toolkit'\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer)\r\n\r\n// export type RootState = ReturnType<typeof store.getState>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<\r\n//     ReturnType,\r\n//     RootState,\r\n//     unknown,\r\n//     Action<string>\r\n// >","D:\\dev\\webdev\\budget-planner\\webapp\\src\\constants\\routes.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\index.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\dataModal.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Navbar\\Navbar.tsx",["189"],"import React from 'react'\r\nimport { useAuth } from 'reactfire'\r\nimport './Navbar.scss'\r\n\r\n// Chakra UI\r\nimport { Box, Button, Flex, Heading, Text, useColorMode } from '@chakra-ui/react'\r\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\r\nimport { Link } from '@reach/router'\r\n\r\ninterface Props {\r\n    isSmall: boolean\r\n}\r\n\r\nconst Navbar = (props: Props) => {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n\r\n    const [user, setUser] = React.useState(null)\r\n    const auth = useAuth()\r\n\r\n    React.useEffect(() => {\r\n        const navbarWrapperElement: any = document.querySelector('.navbar-wrapper')\r\n        if (props.isSmall === true) {\r\n            navbarWrapperElement.style.height = '64px'\r\n            navbarWrapperElement.classList.add('navbar-active')\r\n        } else {\r\n            window.addEventListener('scroll', () => {\r\n                if (navbarWrapperElement) {\r\n                    if (window.scrollY > 150) {\r\n                        navbarWrapperElement.style.height = '64px'\r\n                        navbarWrapperElement.classList.add('navbar-active')\r\n                    } else {\r\n                        navbarWrapperElement.style.height = '128px'\r\n                        navbarWrapperElement.classList.remove('navbar-active')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        auth.onAuthStateChanged((user: any) => {\r\n            if (user) setUser(user)\r\n            else setUser(null)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Flex\r\n            as=\"nav\"\r\n            align=\"center\"\r\n            justify=\"space-between\"\r\n            wrap=\"wrap\"\r\n            className=\"navbar-wrapper\"\r\n            padding=\"0 !important\"\r\n        >\r\n            <Box\r\n                display=\"flex\"\r\n                className=\"wrapper\"\r\n            >\r\n                <Flex align=\"center\" mr={5} flexGrow={1}>\r\n                    <Heading as=\"h1\" size=\"lg\" letterSpacing={\"-.1rem\"}>\r\n                        <Link to=\"/\">\r\n                            Budget planner\r\n                        </Link>\r\n                    </Heading>\r\n                </Flex>\r\n\r\n                <Box display={{ base: \"block\", md: \"none\" }}>\r\n                    <svg\r\n                        fill=\"white\"\r\n                        width=\"12px\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <title>Menu</title>\r\n                        <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n                    </svg>\r\n                </Box>\r\n\r\n                <Box\r\n                    width={{ sm: \"full\", md: \"auto\" }}\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <MenuItems>About</MenuItems>\r\n                    <MenuItems>How it works</MenuItems>\r\n                    <Button\r\n                        variant=\"ghost\"\r\n                        onClick={toggleColorMode}\r\n                        w={10}\r\n                        mr={25}\r\n                        _hover={{\r\n                            bgColor: 'rgba(255, 255, 255, 0.1)'\r\n                        }}\r\n                    >\r\n                        {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n                    </Button>\r\n                </Box>\r\n\r\n\r\n                <Box mt={{ base: 4, md: 0 }}>\r\n                    {user ? (\r\n                        <>\r\n                            <Link to=\"/dashboard\"><Button variant=\"outline\" colorScheme=\"gray\">Dashboard</Button></Link>\r\n                            <Button onClick={() => auth.signOut()} variant=\"outline\" colorScheme=\"gray\" ml={4}>Logout</Button>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                <Link to=\"/login\"><Button bg=\"transparent\" border=\"1px\">Log in</Button></Link>\r\n                                <Link to=\"/signup\"><Button bg=\"transparent\" border=\"1px\" ml={4}>Sign up</Button></Link>\r\n                            </>\r\n                        )}\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\nfunction scrollTo(element: any) {\r\n    element = element.replace(/\\s+/g, '-').toLowerCase()\r\n    const el = document.getElementById(element)\r\n    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n}\r\n\r\nconst MenuItems = ({ children }: any) => (\r\n    <Text onClick={() => scrollTo(children)} cursor=\"pointer\" mt={{ base: 4, md: 0 }} mr={6} display=\"block\">\r\n        {children}\r\n    </Text>\r\n)","D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\Profile\\Profile.tsx",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React from 'react'\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Profile.scss'\r\nimport { useAuth, useDatabase, useStorage } from 'reactfire'\r\n\r\nimport _ from 'lodash'\r\n\r\nimport Chart from 'react-apexcharts'\r\n\r\n// Chakra UI\r\nimport { Box, Button, FormControl, FormLabel, Grid, Image, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Skeleton, Spinner, Text, useDisclosure } from '@chakra-ui/react'\r\nimport { MdClose, MdEdit } from 'react-icons/md'\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport { toast } from 'react-toastify';\r\nimport PFPChanger from '../../../components/Dashboard/PFPChanger/PFPChanger';\r\nimport store from '../../../redux/store';\r\nimport Loader from '../../../components/Loader/Loader';\r\nimport { ApexOptions } from 'apexcharts';\r\nimport getPaymentsAndSubscriptionsData from '../../../utils/getPaymentsAndSubscriptionsData';\r\n\r\nconst Profile = (props: any) => {\r\n    const auth = useAuth()\r\n    const database = useDatabase()\r\n    const storage = useStorage()\r\n\r\n    const [currencies, setCurrencies] = React.useState<any>([\r\n        {\r\n            value: 'EUR',\r\n            label: '€',\r\n        },\r\n        {\r\n            value: 'CAD',\r\n            label: '$'\r\n        },\r\n        {\r\n            value: 'HKD',\r\n            label: '$'\r\n        },\r\n        {\r\n            value: 'ISK',\r\n            label: 'kr'\r\n        },\r\n        {\r\n            value: 'PHP',\r\n            label: '₱'\r\n        },\r\n        {\r\n            value: 'DKK',\r\n            label: 'Kr.'\r\n        },\r\n        {\r\n            value: 'HUF',\r\n            label: 'Ft'\r\n        },\r\n        {\r\n            value: 'CZK',\r\n            label: 'Kč'\r\n        },\r\n        {\r\n            value: 'AUD',\r\n            label: 'A$'\r\n        },\r\n        {\r\n            value: 'RON',\r\n            label: 'lei'\r\n        },\r\n        {\r\n            value: 'SEK',\r\n            label: 'kr'\r\n        },\r\n        {\r\n            value: 'IDR',\r\n            label: 'Rp'\r\n        },\r\n        {\r\n            value: 'INR',\r\n            label: '₹'\r\n        },\r\n        {\r\n            value: 'BRL',\r\n            label: 'R$'\r\n        },\r\n        {\r\n            value: 'RUB',\r\n            label: '₽'\r\n        },\r\n        {\r\n            value: 'HRK',\r\n            label: 'kn'\r\n        },\r\n        {\r\n            value: 'JPY',\r\n            label: '¥',\r\n        },\r\n        {\r\n            value: 'THB',\r\n            label: '฿'\r\n        },\r\n        {\r\n            value: 'CHF',\r\n            label: 'CHf'\r\n        },\r\n        {\r\n            value: 'SGD',\r\n            label: 'S$'\r\n        },\r\n        {\r\n            value: 'PLN',\r\n            label: 'zł'\r\n        },\r\n        {\r\n            value: 'BGN',\r\n            label: 'Лв'\r\n        },\r\n        {\r\n            value: 'TRY',\r\n            label: '₺'\r\n        },\r\n        {\r\n            value: 'CNY',\r\n            label: '¥'\r\n        },\r\n        {\r\n            value: 'NOK',\r\n            label: 'kr'\r\n        },\r\n        {\r\n            value: 'NZD',\r\n            label: '$'\r\n        },\r\n        {\r\n            value: 'ZAR',\r\n            label: 'R'\r\n        },\r\n        {\r\n            value: 'USD',\r\n            label: '$',\r\n        },\r\n        {\r\n            value: 'MXN',\r\n            label: '$'\r\n        },\r\n        {\r\n            value: 'ILS',\r\n            label: '₪'\r\n        },\r\n        {\r\n            value: 'GBP',\r\n            label: '£'\r\n        },\r\n        {\r\n            value: 'KRW',\r\n            label: '₩'\r\n        },\r\n        {\r\n            value: 'MYR',\r\n            label: 'RM'\r\n        }\r\n    ])\r\n    const [currency, setCurrency] = React.useState<any>(['EUR', '€'])\r\n    const [dateFormat, setDateFormat] = React.useState<any>('dd/MM/yyyy')\r\n    const [dateFormats, setDateFormats] = React.useState<any>([\"dd/MM/yyyy\", \"MM/dd/yyyy\"])\r\n    const [showChangeUsername, setShowChangeUsername] = React.useState(false)\r\n    const [showAvatarEditButton, setShowAvatarEditButton] = React.useState(false)\r\n    const [showChangeAvatarModal, setShowChangeAvatarModal] = React.useState(false)\r\n    const [username, setUsername] = React.useState<any>('')\r\n\r\n    const [displayName, setDisplayName] = React.useState<any>(auth.currentUser?.displayName)\r\n    const [avatarUrl, setAvatarUrl] = React.useState<any>()\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<ApexOptions>()\r\n    const [chartSeries, setChartSeries] = React.useState<ApexAxisChartSeries>()\r\n\r\n    const [renderChart, setRenderChart] = React.useState(false)\r\n\r\n    React.useEffect(() => {\r\n        setAvatarUrl(auth.currentUser?.photoURL)\r\n    }, [auth.currentUser?.photoURL])\r\n\r\n    React.useEffect(() => {\r\n        initChart()\r\n        setAvatarUrl(auth.currentUser?.photoURL)\r\n        store.subscribe(() => {\r\n            setShowChangeAvatarModal(store.getState().pfpChanger.value)\r\n        })\r\n    }, [])\r\n\r\n    const initChart = () => {\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((data: any) => {\r\n                let tempData: any = []\r\n                const labels: any = []\r\n                const series: any = []\r\n                data.map((row: any, i: number) => {\r\n                    if (row.type === 'payments') {\r\n                        if (!tempData[i % tempData.length]) {\r\n                            tempData.push({\r\n                                title: row.title,\r\n                                amount: row.amount\r\n                            })\r\n                        } else if (!tempData[i]) {\r\n                            tempData[i] = {\r\n                                title: row.title,\r\n                                amount: row.amount\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n\r\n                tempData.sort((a: any, b: any) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0))\r\n                const groupAndMap = (items: any, itemKey: any, childKey: any) => {\r\n                    return _.map(_.groupBy(items, itemKey), (obj, key) => ({\r\n                        [itemKey]: key,\r\n                        [childKey]: obj\r\n                    }))\r\n                }\r\n\r\n                let epicData: any = groupAndMap(tempData, 'title', 'amount')\r\n                epicData.map((row: any) => {\r\n                    let rowAmount = 0\r\n                    row.amount.map((amount: any) => rowAmount += amount.amount)\r\n                    row.amount = Number(rowAmount.toFixed(2))\r\n                })\r\n                epicData = epicData.sort((a: any, b: any) => (a.amount > b.amount) ? 1 : ((b.amount > a.amount) ? -1 : 0)).slice(0, 5)\r\n                    .map((row: any) => {\r\n                        labels.push(row.title)\r\n                        series.push(Math.abs(row.amount))\r\n                    })\r\n\r\n                const theme = localStorage.getItem('theme')\r\n\r\n                setChartOptions({\r\n                    chart: {\r\n                        height: 300\r\n                    },\r\n                    stroke: {\r\n                        width: 1.5,\r\n                        colors: theme === 'light' ? ['#eee'] : ['#333']\r\n                    },\r\n                    labels: labels,\r\n                    legend: {\r\n                        show: true,\r\n                        position: 'bottom',\r\n                        labels: {\r\n                            colors: theme === 'light' ? ['#333'] : ['#fff']\r\n                        }\r\n                    }\r\n                })\r\n\r\n                setChartSeries(series)\r\n                setRenderChart(true)\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const changeDisplayName = (e: Event) => {\r\n        e.preventDefault()\r\n        auth.currentUser?.updateProfile({\r\n            displayName: username\r\n        })\r\n        setDisplayName(username)\r\n        setShowChangeUsername(false)\r\n    }\r\n\r\n    const submitSettingsChange = async (e: any, type: string) => {\r\n        e.preventDefault()\r\n\r\n        const ref = database.ref(`${auth.currentUser?.uid}/settings`)\r\n        switch (type) {\r\n            case 'currency': {\r\n                let currency = (e.target.value).split('-')\r\n                setCurrency([currency[0], currency[1]])\r\n                ref.update({ currency: currency })\r\n                break\r\n            }\r\n            case 'date': {\r\n                setDateFormat(e.target.value)\r\n                ref.update({ dateFormat: e.target.value })\r\n                break\r\n            }\r\n            default:\r\n                break\r\n        }\r\n\r\n        const settingsForLocalstorage = {\r\n            currency: currency,\r\n            dateFormat: dateFormat\r\n        }\r\n        localStorage.setItem('settings', JSON.stringify(settingsForLocalstorage))\r\n    }\r\n\r\n    if (avatarUrl) {\r\n        return (\r\n            <>\r\n                {showChangeAvatarModal ? (\r\n                    <PFPChanger isOpen={showChangeAvatarModal} />\r\n                ) : (<></>)}\r\n\r\n                <div className=\"dashboard-profile h-100\">\r\n                    <Grid templateColumns=\"1fr\" p={6} className=\"h-100 dashboard-column\">\r\n                        <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" className=\"w-100\">\r\n                            <div className=\"avatar-wrapper w-100\">\r\n                                <Image\r\n                                    src={avatarUrl ? avatarUrl : 'http://via.placeholder.com/300'}\r\n                                    borderRadius=\"50%\"\r\n                                    w=\"100%\"\r\n                                    onMouseEnter={() => setShowAvatarEditButton(true)}\r\n                                    onMouseLeave={() => setShowAvatarEditButton(false)}\r\n                                    alt=\"Avatar\"\r\n                                />\r\n                                {showAvatarEditButton ? (\r\n                                    <div\r\n                                        onClick={() => setShowChangeAvatarModal(true)}\r\n                                        onMouseEnter={() => setShowAvatarEditButton(true)}\r\n                                        onMouseLeave={() => setShowAvatarEditButton(false)}\r\n                                        className=\"avatar-edit-button\"\r\n                                    >\r\n                                        <Box as={MdEdit} size=\"48px\"></Box>\r\n                                    </div>\r\n                                ) : (\r\n                                        <></>\r\n                                    )}\r\n                            </div>\r\n                            <div className=\"h-100 changer-wrapper\">\r\n                                {showChangeUsername ? (\r\n                                    <>\r\n                                        <form onSubmit={(e: any) => changeDisplayName(e)}>\r\n                                            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Button variant=\"solid\" colorScheme=\"red\" onClick={() => setShowChangeUsername(false)}><Box as={MdClose} fontSize=\"32px\"></Box></Button>\r\n                                                <Input defaultValue={displayName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.target.value)} className=\"mx1\" />\r\n                                                <Button variant=\"solid\" colorScheme=\"blue\" onClick={(e: any) => changeDisplayName(e)}><Box as={MdEdit} fontSize=\"32px\"></Box></Button>\r\n                                            </Box>\r\n                                        </form>\r\n                                    </>\r\n                                ) : (\r\n                                        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Text fontSize=\"24px\">{displayName}</Text>\r\n                                            <Box onClick={() => setShowChangeUsername(true)} as={MdEdit} className=\"ml1\" fontSize=\"24px\" cursor=\"pointer\"></Box>\r\n                                        </Box>\r\n                                    )}\r\n                            </div>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid templateColumns=\"1fr\" templateRows=\"1fr 1fr\" p={6} gap={5} className=\"h-100 dashboard-column\">\r\n                        <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" className=\"w-100\">\r\n                            <Box p={4}>\r\n                                <FormControl className=\"my2\">\r\n                                    {currency ? (\r\n                                        <>\r\n                                            <FormLabel htmlFor=\"currency\">Currency</FormLabel>\r\n                                            <Select id=\"currency\" value={`${currency[0]}-${currency[1]}`} onChange={(e) => submitSettingsChange(e, 'currency')}>\r\n                                                {currencies.map((row: any, i: number) => (<option key={i} value={`${row.value}-${row.label}`}>{row.value}, {row.label}</option>))}\r\n                                            </Select>\r\n                                        </>\r\n                                    ) : (<></>)}\r\n                                </FormControl>\r\n\r\n                                <FormControl className=\"my2\">\r\n                                    {dateFormat ? (\r\n                                        <>\r\n                                            <FormLabel htmlFor=\"date-format\">Date format</FormLabel>\r\n                                            <Select id=\"date-format\" value={dateFormat} onChange={(e) => submitSettingsChange(e, 'date')}>\r\n                                                {dateFormats.map((row: any, i: number) => (<option key={i}>{row}</option>))}\r\n                                            </Select>\r\n                                        </>\r\n                                    ) : (<></>)}\r\n                                </FormControl>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" className=\"w-100\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <Box p={4}>\r\n                                {renderChart ? (\r\n                                    <Chart\r\n                                        height=\"350px\"\r\n                                        options={chartOptions}\r\n                                        series={chartSeries}\r\n                                        type=\"pie\"\r\n                                    />\r\n                                ) : (<Skeleton height=\"350px\" />)}\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nexport default Profile","D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\PFPChanger\\PFPChanger.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\pfpChanger.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Dashboard\\List\\List.tsx",["206","207"],"import React from 'react'\r\nimport { useAuth, useFirestore } from 'reactfire'\r\nimport store from '../../../redux/store'\r\n\r\n// Components\r\nimport Loader from '../../../components/Loader/Loader'\r\n\r\n// Chakra UI\r\nimport { Box, CloseButton, Tab, Table, TabList, TabPanel, TabPanels, Tabs, Tbody, Td, Text, Th, Thead, Tr } from '@chakra-ui/react'\r\nimport { ChevronLeftIcon, ChevronRightIcon, EditIcon } from '@chakra-ui/icons'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\n// Utils\r\nimport ErrorHandler from '../../../utils/ErrorHandler'\r\nimport checkNumber from '../../../utils/checkNumber'\r\nimport CurrencyFormatter from '../../../utils/CurrencyFormatter'\r\nimport getPaymentsAndSubscriptionsData from '../../../utils/getPaymentsAndSubscriptionsData'\r\nimport { format } from 'date-fns'\r\nimport EditDataModal from '../../../components/Dashboard/EditDataModal/EditDataModal'\r\n\r\n\r\n\r\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n\r\nconst List = (props: any) => {\r\n    const [allData, setAllData] = React.useState<any>()\r\n\r\n    const [paymentsData, setPaymentsData] = React.useState<any>(null)\r\n    const [subscriptionsData, setSubscriptionsData] = React.useState<any>(null)\r\n\r\n    const [selectedMonth, setSelectedMonth] = React.useState<any>()\r\n    const [selectedYear, setSelectedYear] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        const d = new Date()\r\n        setSelectedMonth(checkNumber(d.getMonth()))\r\n        setSelectedYear(d.getFullYear())\r\n        getData()\r\n        store.subscribe(() => {\r\n            if (store.getState().productChange.value) {\r\n                getData()\r\n                store.dispatch({ type: 'productChange', newState: false })\r\n            }\r\n\r\n            if (!store.getState().editDataModal.value) {\r\n                getData()\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (selectedMonth) {\r\n            updateData()\r\n        }\r\n    }, [selectedMonth, selectedYear, allData])\r\n\r\n    const getData = () => {\r\n        setAllData([])\r\n        getPaymentsAndSubscriptionsData()\r\n            .then((data: any) => {\r\n                setAllData(data)\r\n            })\r\n            .catch(err => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const prevMonth = async () => {\r\n        let selectedMonthInstance: any = selectedMonth\r\n        let selectedYearInstance: any = selectedYear\r\n\r\n        if (selectedMonth > 0) {\r\n            selectedMonthInstance = selectedMonth - 1\r\n        } else {\r\n            selectedMonthInstance = 11\r\n            selectedYearInstance--\r\n        }\r\n        await setSelectedMonth(checkNumber(selectedMonthInstance))\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const nextMonth = async () => {\r\n        let selectedMonthInstance: any = selectedMonth\r\n        let selectedYearInstance: any = selectedYear\r\n\r\n        if (selectedMonth < 11) {\r\n            selectedMonthInstance++\r\n        } else {\r\n            selectedMonthInstance = 0\r\n            selectedYearInstance++\r\n        }\r\n        await setSelectedMonth(checkNumber(selectedMonthInstance))\r\n        await setSelectedYear(selectedYearInstance)\r\n    }\r\n\r\n    const resetDate = async () => {\r\n        const d = new Date()\r\n        await setSelectedMonth(checkNumber(d.getMonth()))\r\n        await setSelectedYear(d.getFullYear())\r\n    }\r\n\r\n    const updateData = () => {\r\n        const paymentsData: any = []\r\n        const subscriptionsData: any = []\r\n        allData.map((row: any) => {\r\n            if (row.type === 'subscriptions') {\r\n                if (row.year === selectedYear) {\r\n                    subscriptionsData.push(row)\r\n                }\r\n            }\r\n            if (row.type === 'payments') {\r\n                let date = row.date.split('-')\r\n                date = `${date[1]}/${date[0]}`\r\n                const checkDate = `${checkNumber(Number(selectedMonth) + 1)}/${selectedYear}`\r\n                if (checkDate === date) {\r\n                    if (row.type === 'payments') paymentsData.push(row)\r\n                    else subscriptionsData.push(row)\r\n                }\r\n            }\r\n        })\r\n\r\n        paymentsData.sort((a: any, b: any) => {\r\n            const aDate: any = new Date(a.date)\r\n            const bDate: any = new Date(b.date)\r\n            return aDate - bDate\r\n        })\r\n        subscriptionsData.sort((a: any, b: any) => {\r\n            const aDate: any = new Date(a.date)\r\n            const bDate: any = new Date(b.date)\r\n            return aDate - bDate\r\n        })\r\n\r\n        setPaymentsData(paymentsData)\r\n        setSubscriptionsData(subscriptionsData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"month-changer px4 py2\">\r\n                <ChevronLeftIcon onClick={() => prevMonth()} />\r\n                <p style={{ cursor: 'pointer' }} onClick={resetDate}>{months[Number(selectedMonth)]}, {selectedYear}</p>\r\n                <ChevronRightIcon onClick={() => nextMonth()} />\r\n            </div>\r\n            <Tabs className=\"dashboard-list\" isFitted variant=\"enclosed\">\r\n                <TabList mb=\"1em\">\r\n                    <Tab\r\n                        _focus={{ borderColor: 'transparent' }}\r\n                    >Payments</Tab>\r\n                    <Tab\r\n                        _focus={{ borderColor: 'transparent' }}\r\n                    >Subscriptions</Tab>\r\n                </TabList>\r\n                <TabPanels>\r\n                    <TabPanel padding={0}>\r\n                        <PaymentsList data={paymentsData} />\r\n                    </TabPanel>\r\n                    <TabPanel padding={0}>\r\n                        <SubscriptionsList data={subscriptionsData} />\r\n                    </TabPanel>\r\n                </TabPanels>\r\n            </Tabs>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default List\r\n\r\nconst PaymentsList = (props: any) => {\r\n    const auth = useAuth()\r\n    const firestore = useFirestore()\r\n\r\n    const [showEditDataModal, setShowEditDataModal] = React.useState(false)\r\n    const [editDataModalData, setEditDataModalData] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setShowEditDataModal(store.getState().editDataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    const removeFromList = async (id: any, type: any) => {\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection(type).doc(id).delete()\r\n            .then(() => {\r\n                toast.success('Payment successfully deleted!')\r\n                store.dispatch({ type: 'productChange', newState: true })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const editData = (data: any) => {\r\n        setEditDataModalData(data)\r\n        store.dispatch({ type: 'setOpenEditDataModal', newVal: true })\r\n        setShowEditDataModal(true)\r\n    }\r\n\r\n    if (props.data) {\r\n        if (props.data.length > 0) {\r\n            return (\r\n                <>\r\n                    {showEditDataModal ? (\r\n                        <EditDataModal data={editDataModalData} isOpen={showEditDataModal} />\r\n                    ) : <></>}\r\n\r\n                    <Table\r\n                        variant=\"simple\"\r\n                        size=\"sm\"\r\n                    >\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Edit</Th>\r\n                                <Th>Title</Th>\r\n                                <Th>Date</Th>\r\n                                <Th>Amount</Th>\r\n                                <Th>Remove</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {props.data.map((row: any, i: number) => (\r\n                                <Tr key={i}>\r\n                                    <Td\r\n                                        onClick={() => editData(row)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <EditIcon style={{ cursor: 'pointer' }} />\r\n                                    </Td>\r\n                                    <Td>{row.title}</Td>\r\n                                    <Td>{format(new Date(row.date), 'dd/MM/yyyy')}</Td>\r\n                                    <Td>{CurrencyFormatter(row.amount)}</Td>\r\n                                    <Td\r\n                                        onClick={() => removeFromList(row.id, row.type)}\r\n                                        pl={30}\r\n                                    ><CloseButton /></Td>\r\n                                </Tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Box p={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className=\"h-100\">\r\n                    <Text fontSize=\"4xl\">No payments found.</Text>\r\n                </Box>\r\n            )\r\n        }\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}\r\n\r\nconst SubscriptionsList = (props: any) => {\r\n    const auth = useAuth()\r\n    const firestore = useFirestore()\r\n\r\n    const [showEditDataModal, setShowEditDataModal] = React.useState(false)\r\n    const [editDataModalData, setEditDataModalData] = React.useState<any>()\r\n\r\n    React.useEffect(() => {\r\n        store.subscribe(() => {\r\n            setShowEditDataModal(store.getState().editDataModal.value)\r\n        })\r\n    }, [])\r\n\r\n    const removeFromList = async (id: any, type: any) => {\r\n        await firestore.collection('financial_data').doc(auth.currentUser?.uid).collection(type).doc(id).delete()\r\n            .then(() => {\r\n                toast.success('Payment successfully deleted!')\r\n                store.dispatch({ type: 'productChange', newState: true })\r\n            })\r\n            .catch((err: Error) => new ErrorHandler(err.message))\r\n    }\r\n\r\n    const editData = (data: any) => {\r\n        setEditDataModalData(data)\r\n        store.dispatch({ type: 'setOpenEditDataModal', newVal: true })\r\n        setShowEditDataModal(true)\r\n    }\r\n\r\n    if (props.data) {\r\n        if (props.data.length > 0) {\r\n            return (\r\n                <>\r\n                    {showEditDataModal ? (\r\n                        <EditDataModal data={editDataModalData} isOpen={showEditDataModal} />\r\n                    ) : <></>}\r\n\r\n                    <Table\r\n                        variant=\"simple\"\r\n                        size=\"sm\"\r\n                    >\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Edit</Th>\r\n                                <Th>Title</Th>\r\n                                <Th>Recurrences</Th>\r\n                                <Th>Amount</Th>\r\n                                <Th>Remove</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {props.data.map((row: any, i: number) => (\r\n                                <Tr key={i}>\r\n                                    <Td\r\n                                        onClick={() => editData(row)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <EditIcon style={{ cursor: 'pointer' }} />\r\n                                    </Td>\r\n                                    <Td>{row.title}</Td>\r\n                                    <Td>{row.recurrences}</Td>\r\n                                    <Td>{CurrencyFormatter(row.amount)}</Td>\r\n                                    <Td\r\n                                        onClick={() => removeFromList(row.id, row.type)}\r\n                                        pl={30}\r\n                                    >\r\n                                        <CloseButton />\r\n                                    </Td>\r\n                                </Tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Box p={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className=\"h-100\">\r\n                    <Text fontSize=\"4xl\">No subscriptions found.</Text>\r\n                </Box>\r\n            )\r\n        }\r\n    } else {\r\n        return <Loader />\r\n    }\r\n}","D:\\dev\\webdev\\budget-planner\\webapp\\src\\utils\\getPaymentsAndSubscriptionsData.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\productChange.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Public\\Footer\\Footer.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\pages\\Donate\\Donate.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\redux\\reducers\\editDataModal.ts",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\Dashboard\\EditDataModal\\EditDataModal.tsx",[],"D:\\dev\\webdev\\budget-planner\\webapp\\src\\components\\NavLink\\NavLink.tsx",[],{"ruleId":"208","severity":1,"message":"209","line":4,"column":18,"nodeType":"210","messageId":"211","endLine":4,"endColumn":29},{"ruleId":"208","severity":1,"message":"212","line":36,"column":12,"nodeType":"210","messageId":"211","endLine":36,"endColumn":16},{"ruleId":"213","severity":1,"message":"214","line":46,"column":8,"nodeType":"215","endLine":46,"endColumn":10,"suggestions":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"208","severity":1,"message":"221","line":5,"column":13,"nodeType":"210","messageId":"211","endLine":5,"endColumn":19},{"ruleId":"208","severity":1,"message":"222","line":12,"column":8,"nodeType":"210","messageId":"211","endLine":12,"endColumn":12},{"ruleId":"208","severity":1,"message":"223","line":13,"column":8,"nodeType":"210","messageId":"211","endLine":13,"endColumn":14},{"ruleId":"208","severity":1,"message":"224","line":13,"column":8,"nodeType":"210","messageId":"211","endLine":13,"endColumn":17},{"ruleId":"208","severity":1,"message":"225","line":14,"column":8,"nodeType":"210","messageId":"211","endLine":14,"endColumn":16},{"ruleId":"208","severity":1,"message":"226","line":15,"column":8,"nodeType":"210","messageId":"211","endLine":15,"endColumn":15},{"ruleId":"208","severity":1,"message":"227","line":18,"column":33,"nodeType":"210","messageId":"211","endLine":18,"endColumn":37},{"ruleId":"208","severity":1,"message":"228","line":18,"column":39,"nodeType":"210","messageId":"211","endLine":18,"endColumn":49},{"ruleId":"208","severity":1,"message":"229","line":18,"column":51,"nodeType":"210","messageId":"211","endLine":18,"endColumn":59},{"ruleId":"208","severity":1,"message":"230","line":18,"column":61,"nodeType":"210","messageId":"211","endLine":18,"endColumn":69},{"ruleId":"208","severity":1,"message":"231","line":19,"column":10,"nodeType":"210","messageId":"211","endLine":19,"endColumn":25},{"ruleId":"208","severity":1,"message":"221","line":23,"column":13,"nodeType":"210","messageId":"211","endLine":23,"endColumn":19},{"ruleId":"208","severity":1,"message":"232","line":24,"column":8,"nodeType":"210","messageId":"211","endLine":24,"endColumn":12},{"ruleId":"208","severity":1,"message":"233","line":25,"column":8,"nodeType":"210","messageId":"211","endLine":25,"endColumn":15},{"ruleId":"208","severity":1,"message":"234","line":62,"column":12,"nodeType":"210","messageId":"211","endLine":62,"endColumn":20},{"ruleId":"208","severity":1,"message":"235","line":64,"column":12,"nodeType":"210","messageId":"211","endLine":64,"endColumn":23},{"ruleId":"208","severity":1,"message":"236","line":64,"column":25,"nodeType":"210","messageId":"211","endLine":64,"endColumn":39},{"ruleId":"213","severity":1,"message":"237","line":79,"column":8,"nodeType":"215","endLine":79,"endColumn":10,"suggestions":"238"},{"ruleId":"208","severity":1,"message":"239","line":26,"column":11,"nodeType":"210","messageId":"211","endLine":26,"endColumn":20},{"ruleId":"208","severity":1,"message":"240","line":33,"column":12,"nodeType":"210","messageId":"211","endLine":33,"endColumn":25},{"ruleId":"208","severity":1,"message":"241","line":34,"column":12,"nodeType":"210","messageId":"211","endLine":34,"endColumn":24},{"ruleId":"208","severity":1,"message":"242","line":41,"column":12,"nodeType":"210","messageId":"211","endLine":41,"endColumn":24},{"ruleId":"208","severity":1,"message":"243","line":42,"column":12,"nodeType":"210","messageId":"211","endLine":42,"endColumn":29},{"ruleId":"213","severity":1,"message":"244","line":50,"column":8,"nodeType":"215","endLine":50,"endColumn":70,"suggestions":"245"},{"ruleId":"213","severity":1,"message":"246","line":50,"column":23,"nodeType":"247","endLine":50,"endColumn":33},{"ruleId":"213","severity":1,"message":"246","line":50,"column":35,"nodeType":"247","endLine":50,"endColumn":45},{"ruleId":"213","severity":1,"message":"246","line":50,"column":47,"nodeType":"247","endLine":50,"endColumn":57},{"ruleId":"213","severity":1,"message":"246","line":50,"column":59,"nodeType":"247","endLine":50,"endColumn":69},{"ruleId":"248","severity":1,"message":"249","line":98,"column":36,"nodeType":"250","messageId":"251","endLine":98,"endColumn":38},{"ruleId":"252","severity":1,"message":"253","line":113,"column":54,"nodeType":"254","messageId":"255","endLine":113,"endColumn":56},{"ruleId":"248","severity":1,"message":"249","line":124,"column":57,"nodeType":"250","messageId":"251","endLine":124,"endColumn":59},{"ruleId":"248","severity":1,"message":"249","line":176,"column":29,"nodeType":"250","messageId":"251","endLine":176,"endColumn":31},{"ruleId":"248","severity":1,"message":"249","line":67,"column":37,"nodeType":"250","messageId":"251","endLine":67,"endColumn":39},{"ruleId":"248","severity":1,"message":"249","line":75,"column":68,"nodeType":"250","messageId":"251","endLine":75,"endColumn":70},{"ruleId":"213","severity":1,"message":"256","line":100,"column":8,"nodeType":"215","endLine":100,"endColumn":10,"suggestions":"257"},{"ruleId":"208","severity":1,"message":"258","line":1,"column":10,"nodeType":"210","messageId":"211","endLine":1,"endColumn":21},{"ruleId":"208","severity":1,"message":"259","line":1,"column":23,"nodeType":"210","messageId":"211","endLine":1,"endColumn":29},{"ruleId":"213","severity":1,"message":"260","line":43,"column":8,"nodeType":"215","endLine":43,"endColumn":10,"suggestions":"261"},{"ruleId":"208","severity":1,"message":"262","line":11,"column":67,"nodeType":"210","messageId":"211","endLine":11,"endColumn":72},{"ruleId":"208","severity":1,"message":"263","line":11,"column":74,"nodeType":"210","messageId":"211","endLine":11,"endColumn":83},{"ruleId":"208","severity":1,"message":"264","line":11,"column":85,"nodeType":"210","messageId":"211","endLine":11,"endColumn":97},{"ruleId":"208","severity":1,"message":"265","line":11,"column":99,"nodeType":"210","messageId":"211","endLine":11,"endColumn":110},{"ruleId":"208","severity":1,"message":"266","line":11,"column":112,"nodeType":"210","messageId":"211","endLine":11,"endColumn":123},{"ruleId":"208","severity":1,"message":"267","line":11,"column":125,"nodeType":"210","messageId":"211","endLine":11,"endColumn":137},{"ruleId":"208","severity":1,"message":"268","line":11,"column":157,"nodeType":"210","messageId":"211","endLine":11,"endColumn":164},{"ruleId":"208","severity":1,"message":"269","line":11,"column":172,"nodeType":"210","messageId":"211","endLine":11,"endColumn":185},{"ruleId":"208","severity":1,"message":"270","line":14,"column":10,"nodeType":"210","messageId":"211","endLine":14,"endColumn":15},{"ruleId":"208","severity":1,"message":"271","line":24,"column":11,"nodeType":"210","messageId":"211","endLine":24,"endColumn":18},{"ruleId":"208","severity":1,"message":"272","line":26,"column":24,"nodeType":"210","messageId":"211","endLine":26,"endColumn":37},{"ruleId":"208","severity":1,"message":"273","line":162,"column":25,"nodeType":"210","messageId":"211","endLine":162,"endColumn":39},{"ruleId":"213","severity":1,"message":"274","line":186,"column":8,"nodeType":"215","endLine":186,"endColumn":10,"suggestions":"275"},{"ruleId":"248","severity":1,"message":"249","line":194,"column":48,"nodeType":"250","messageId":"251","endLine":194,"endColumn":50},{"ruleId":"248","severity":1,"message":"249","line":219,"column":41,"nodeType":"250","messageId":"251","endLine":219,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":225,"column":37,"nodeType":"250","messageId":"251","endLine":225,"endColumn":39},{"ruleId":"213","severity":1,"message":"276","line":56,"column":8,"nodeType":"215","endLine":56,"endColumn":46,"suggestions":"277"},{"ruleId":"248","severity":1,"message":"249","line":104,"column":32,"nodeType":"250","messageId":"251","endLine":104,"endColumn":34},"@typescript-eslint/no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["278"],"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"'ROUTES' is defined but never used.","'Home' is defined but never used.","'Donate' is defined but never used.","'Frontpage' is defined but never used.","'Calendar' is defined but never used.","'Profile' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'ChevronDownIcon' is defined but never used.","'List' is defined but never used.","'NoMatch' is defined but never used.","'settings' is assigned a value but never used.","'displayName' is assigned a value but never used.","'setDisplayName' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'auth.currentUser?.uid', 'database', 'location.pathname', and 'navigate'. Either include them or remove the dependency array.",["281"],"'firestore' is assigned a value but never used.","'selectedMonth' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","'paymentsData' is assigned a value but never used.","'subscriptionsData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getData' and 'initChart'. Either include them or remove the dependency array.",["282"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'getPaymentsAndSubscriptionsData'. Either include it or remove the dependency array.",["283"],"'ThunkAction' is defined but never used.","'Action' is defined but never used.","React Hook React.useEffect has missing dependencies: 'auth' and 'props.isSmall'. Either include them or remove the dependency array.",["284"],"'Modal' is defined but never used.","'ModalBody' is defined but never used.","'ModalContent' is defined but never used.","'ModalFooter' is defined but never used.","'ModalHeader' is defined but never used.","'ModalOverlay' is defined but never used.","'Spinner' is defined but never used.","'useDisclosure' is defined but never used.","'toast' is defined but never used.","'storage' is assigned a value but never used.","'setCurrencies' is assigned a value but never used.","'setDateFormats' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'auth.currentUser?.photoURL'. Either include it or remove the dependency array.",["285"],"React Hook React.useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["286"],{"desc":"287","fix":"288"},"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [auth]",{"range":"301","text":"302"},"Update the dependencies array to be: [auth.currentUser?.uid, database, location.pathname, navigate]",{"range":"303","text":"304"},"Update the dependencies array to be: [getData, initChart, selectedYear]",{"range":"305","text":"306"},"Update the dependencies array to be: [getPaymentsAndSubscriptionsData]",{"range":"307","text":"308"},"Update the dependencies array to be: [auth, props.isSmall]",{"range":"309","text":"310"},"Update the dependencies array to be: [auth.currentUser?.photoURL]",{"range":"311","text":"312"},"Update the dependencies array to be: [selectedMonth, selectedYear, allData, updateData]",{"range":"313","text":"314"},[1397,1399],"[auth]",[2671,2673],"[auth.currentUser?.uid, database, location.pathname, navigate]",[2016,2078],"[getData, initChart, selectedYear]",[4087,4089],"[getPaymentsAndSubscriptionsData]",[1478,1480],"[auth, props.isSmall]",[4865,4867],"[auth.currentUser?.photoURL]",[2010,2048],"[selectedMonth, selectedYear, allData, updateData]"]